import streamlit as st
import pandas as pd
import numpy as np
import os
import json
from datetime import datetime, date
import hashlib
import base64
import random
import string
from PIL import Image
import paramiko
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de p√°gina para website p√∫blico
st.set_page_config(
    page_title="Escuela de Enfermer√≠a",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================================================
# SISTEMA DE CARGA REMOTA VIA SSH - CORREGIDO CON RUTAS CORRECTAS
# =============================================================================

class CargadorRemoto:
    def __init__(self):
        self.ssh = None
        self.sftp = None
        
    def conectar(self):
        """Establecer conexi√≥n SSH con el servidor remoto usando puerto 3792"""
        try:
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # CONEXI√ìN CON PUERTO 3792 - CORREGIDO
            self.ssh.connect(
                hostname=st.secrets["remote_host"],
                port=st.secrets["remote_port"],  # Usar√° 3792 del secrets.toml
                username=st.secrets["remote_user"],
                password=st.secrets["remote_password"],
                timeout=30
            )
            self.sftp = self.ssh.open_sftp()
            return True
        except Exception as e:
            st.error(f"‚ùå Error de conexi√≥n SSH: {e}")
            return False
    
    def desconectar(self):
        """Cerrar conexi√≥n SSH"""
        try:
            if self.sftp:
                self.sftp.close()
            if self.ssh:
                self.ssh.close()
        except:
            pass
    
    def crear_directorio_remoto(self, ruta):
        """Crear directorio remoto recursivamente si no existe"""
        try:
            self.sftp.stat(ruta)
            return True  # El directorio ya existe
        except FileNotFoundError:
            try:
                # Crear directorio recursivamente
                partes = ruta.strip('/').split('/')
                path_actual = ''
                for parte in partes:
                    if parte:
                        path_actual += '/' + parte
                        try:
                            self.sftp.stat(path_actual)
                        except FileNotFoundError:
                            self.sftp.mkdir(path_actual)
                return True
            except Exception as e:
                st.error(f"‚ùå Error creando directorio {ruta}: {e}")
                return False
    
    def cargar_csv_remoto(self, ruta_remota):
        """Cargar archivo CSV desde el servidor remoto"""
        try:
            if not self.conectar():
                return pd.DataFrame()
            
            # Verificar si el archivo existe en el servidor remoto
            try:
                self.sftp.stat(ruta_remota)
            except FileNotFoundError:
                # Si el archivo no existe, crear estructura vac√≠a
                return pd.DataFrame()
            
            # Leer archivo remoto
            with self.sftp.file(ruta_remota, 'r') as archivo_remoto:
                # Intentar diferentes codificaciones
                try:
                    df = pd.read_csv(archivo_remoto, encoding='utf-8')
                except UnicodeDecodeError:
                    archivo_remoto.seek(0)
                    df = pd.read_csv(archivo_remoto, encoding='latin-1')
                
            return df
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error cargando {os.path.basename(ruta_remota)}: {str(e)}")
            return pd.DataFrame()
        finally:
            self.desconectar()

# =============================================================================
# SISTEMA DE GESTI√ìN DE INSCRITOS CON CONEXI√ìN REMOTA - RUTAS CORREGIDAS
# =============================================================================

class SistemaInscritos:
    def __init__(self):
        # RUTAS CORREGIDAS - usando la estructura que necesitas
        self.BASE_DIR_REMOTO = st.secrets["remote_dir"]  # "/home/POLANCO6/ESCUELA"
        
        # Archivos CSV en las rutas correctas
        self.archivo_inscritos = os.path.join(self.BASE_DIR_REMOTO, "datos", "inscritos.csv")
        self.archivo_usuarios = os.path.join(self.BASE_DIR_REMOTO, "config", "usuarios.csv")
        self.archivo_documentos = os.path.join(self.BASE_DIR_REMOTO, "datos", "documentos_inscritos.csv")
        
        # Carpeta para documentos PDF
        self.carpeta_documentos = os.path.join(self.BASE_DIR_REMOTO, "uploads")
        
        # Instancia del cargador remoto
        self.cargador_remoto = CargadorRemoto()
        
        # Cargar datos iniciales
        self.cargar_datos()
    
    def cargar_datos(self):
        """Cargar datos de inscritos desde el servidor remoto"""
        try:
            # Cargar inscritos - desde datos/inscritos.csv
            self.df_inscritos = self.cargador_remoto.cargar_csv_remoto(self.archivo_inscritos)
            if self.df_inscritos.empty:
                self.df_inscritos = pd.DataFrame(columns=[
                    'matricula', 'fecha_registro', 'nombre_completo', 'email', 
                    'telefono', 'programa_interes', 'estatus', 'folio',
                    'documentos_subidos', 'fecha_nacimiento', 'como_se_entero', 'documentos_guardados'
                ])
            
            # Cargar usuarios - desde config/usuarios.csv
            self.df_usuarios = self.cargador_remoto.cargar_csv_remoto(self.archivo_usuarios)
            if self.df_usuarios.empty:
                self.df_usuarios = pd.DataFrame(columns=[
                    'usuario', 'password', 'rol', 'nombre', 'email', 
                    'activo', 'fecha_registro', 'estatus'
                ])
            
            # Cargar documentos - desde datos/documentos_inscritos.csv
            self.df_documentos = self.cargador_remoto.cargar_csv_remoto(self.archivo_documentos)
            if self.df_documentos.empty:
                self.df_documentos = pd.DataFrame(columns=[
                    'matricula', 'nombre_archivo', 'tipo_documento', 
                    'fecha_subida', 'estatus', 'ruta_archivo'
                ])
                
        except Exception as e:
            st.error(f"‚ùå Error cargando datos iniciales: {e}")
            # DataFrames vac√≠os como fallback
            self.df_inscritos = pd.DataFrame(columns=[
                'matricula', 'fecha_registro', 'nombre_completo', 'email', 
                'telefono', 'programa_interes', 'estatus', 'folio',
                'documentos_subidos', 'fecha_nacimiento', 'como_se_entero', 'documentos_guardados'
            ])
            self.df_usuarios = pd.DataFrame(columns=[
                'usuario', 'password', 'rol', 'nombre', 'email', 
                'activo', 'fecha_registro', 'estatus'
            ])
            self.df_documentos = pd.DataFrame(columns=[
                'matricula', 'nombre_archivo', 'tipo_documento', 
                'fecha_subida', 'estatus', 'ruta_archivo'
            ])
    
    def guardar_datos(self):
        """Guardar datos de inscritos en el servidor remoto - RUTAS CORREGIDAS"""
        try:
            # Crear directorios remotos si no existen
            if not self.crear_estructura_directorios():
                return False
            
            # Guardar inscritos en datos/inscritos.csv
            if not self.guardar_dataframe_remoto(self.df_inscritos, self.archivo_inscritos):
                return False
            
            # Guardar usuarios en config/usuarios.csv
            if not self.guardar_dataframe_remoto(self.df_usuarios, self.archivo_usuarios):
                return False
            
            # Guardar documentos en datos/documentos_inscritos.csv
            if not self.guardar_dataframe_remoto(self.df_documentos, self.archivo_documentos):
                return False
            
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error guardando datos de inscritos: {e}")
            return False
    
    def crear_estructura_directorios(self):
        """Crear estructura de directorios remota si no existe"""
        try:
            if not self.cargador_remoto.conectar():
                return False
            
            # Crear directorio base
            self.cargador_remoto.crear_directorio_remoto(self.BASE_DIR_REMOTO)
            
            # Crear subdirectorios necesarios
            directorios = [
                self.BASE_DIR_REMOTO,  # Directorio principal
                os.path.join(self.BASE_DIR_REMOTO, "datos"),
                os.path.join(self.BASE_DIR_REMOTO, "config"), 
                os.path.join(self.BASE_DIR_REMOTO, "uploads")
            ]
            
            for directorio in directorios:
                if not self.cargador_remoto.crear_directorio_remoto(directorio):
                    return False
            
            self.cargador_remoto.desconectar()
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error creando estructura de directorios: {e}")
            return False
    
    def guardar_dataframe_remoto(self, dataframe, archivo_remoto):
        """Guardar DataFrame en el servidor remoto"""
        try:
            if not self.cargador_remoto.conectar():
                st.error("‚ùå No se pudo conectar al servidor remoto")
                return False
            
            # Crear directorio si no existe
            directorio = os.path.dirname(archivo_remoto)
            if not self.cargador_remoto.crear_directorio_remoto(directorio):
                return False
            
            # Convertir DataFrame a CSV en memoria
            csv_data = dataframe.to_csv(index=False, encoding='utf-8')
            
            # Subir al servidor remoto
            with self.cargador_remoto.sftp.file(archivo_remoto, 'w') as archivo_remoto_obj:
                archivo_remoto_obj.write(csv_data)
            
            self.cargador_remoto.desconectar()
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error al guardar en remoto: {e}")
            return False
    
    def guardar_archivo_remoto(self, contenido_bytes, ruta_remota):
        """Guardar archivo f√≠sico en el servidor remoto"""
        try:
            if not self.cargador_remoto.conectar():
                return False
            
            # Crear directorio si no existe
            directorio = os.path.dirname(ruta_remota)
            if not self.cargador_remoto.crear_directorio_remoto(directorio):
                return False
            
            # Guardar archivo
            with self.cargador_remoto.sftp.file(ruta_remota, 'wb') as archivo_remoto:
                archivo_remoto.write(contenido_bytes)
            
            self.cargador_remoto.desconectar()
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error guardando archivo remoto: {e}")
            return False
    
    def generar_matricula_inscrito(self):
        """Generar matr√≠cula √∫nica para inscrito"""
        try:
            while True:
                numero = ''.join(random.choices(string.digits, k=5))
                matricula = f"MAT-INS{numero}"
                
                # Verificar que no exista
                if self.df_inscritos.empty or matricula not in self.df_inscritos['matricula'].values:
                    return matricula
        except Exception as e:
            return f"MAT-INS{random.randint(10000, 99999)}"
    
    def registrar_inscrito(self, datos_inscrito, nombres_documentos):
        """Registrar nuevo inscrito en el sistema remoto"""
        try:
            # Generar matr√≠cula √∫nica
            matricula = self.generar_matricula_inscrito()
            
            # Crear registro del inscrito CON TODOS LOS CAMPOS CORRECTOS
            nuevo_inscrito = {
                'matricula': matricula,
                'fecha_registro': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'nombre_completo': datos_inscrito['nombre_completo'],
                'email': datos_inscrito['email'],
                'telefono': datos_inscrito['telefono'],
                'programa_interes': datos_inscrito['programa_interes'],
                'estatus': 'Pre-inscrito',
                'folio': f"FOL-{datetime.now().strftime('%Y%m%d')}-{random.randint(1000,9999)}",
                'documentos_subidos': len(nombres_documentos),
                'documentos_guardados': ', '.join(nombres_documentos) if nombres_documentos else 'Ninguno'
            }
            
            # Agregar campos adicionales
            if 'fecha_nacimiento' in datos_inscrito and datos_inscrito['fecha_nacimiento']:
                nuevo_inscrito['fecha_nacimiento'] = str(datos_inscrito['fecha_nacimiento'])
            else:
                nuevo_inscrito['fecha_nacimiento'] = ''
            
            # CORREGIDO: Guardar el texto de la opci√≥n, no el √≠ndice
            if 'como_se_entero' in datos_inscrito and datos_inscrito['como_se_entero']:
                nuevo_inscrito['como_se_entero'] = datos_inscrito['como_se_entero']
            else:
                nuevo_inscrito['como_se_entero'] = ''
            
            # Agregar al DataFrame de inscritos
            nuevo_df = pd.DataFrame([nuevo_inscrito])
            if self.df_inscritos.empty:
                self.df_inscritos = nuevo_df
            else:
                self.df_inscritos = pd.concat([self.df_inscritos, nuevo_df], ignore_index=True)
            
            # Tambi√©n crear registro en usuarios.csv CON EL FORMATO CORRECTO
            # Basado en la estructura que muestras, el campo 'activo' va antes de 'fecha_registro'
            nuevo_usuario = {
                'usuario': matricula,  # Usar la matr√≠cula como usuario
                'password': '123',     # Password como entero 123, no 123.0
                'rol': 'inscrito',     # Rol como "inscrito" no "aspirante"
                'nombre': datos_inscrito['nombre_completo'],
                'email': datos_inscrito['email'],
                'activo': 'True',      # Campo 'activo' como string 'True'
                'fecha_registro': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'estatus': 'activo'    # 'estatus' como 'activo' no 'True'
            }
            
            nuevo_user_df = pd.DataFrame([nuevo_usuario])
            if self.df_usuarios.empty:
                self.df_usuarios = nuevo_user_df
            else:
                self.df_usuarios = pd.concat([self.df_usuarios, nuevo_user_df], ignore_index=True)
            
            # Guardar datos en servidor remoto
            if self.guardar_datos():
                return matricula, nuevo_inscrito['folio']
            else:
                return None, None
                
        except Exception as e:
            st.error(f"‚ùå Error al registrar inscrito: {e}")
            return None, None
    
    def guardar_documento(self, matricula, nombre_completo, tipo_documento, archivo):
        """Guardar documento del inscrito en uploads/"""
        try:
            # Generar nombre de archivo estandarizado
            timestamp = datetime.now().strftime('%y%m%d%H%M%S')
            nombre_limpio = ''.join(c for c in nombre_completo if c.isalnum() or c in (' ', '-', '_')).rstrip()
            nombre_limpio = nombre_limpio.replace(' ', '_')[:30]
            tipo_limpio = tipo_documento.replace(' ', '_').upper()
            
            # Nombre del archivo PDF
            extension = archivo.name.split('.')[-1] if '.' in archivo.name else 'pdf'
            nombre_archivo = f"{matricula}_{nombre_limpio}_{timestamp}_{tipo_limpio}.{extension}"
            
            # Ruta completa en servidor remoto (en uploads/)
            ruta_completa = os.path.join(self.carpeta_documentos, nombre_archivo)
            
            # Guardar archivo en servidor remoto
            if not self.guardar_archivo_remoto(archivo.getvalue(), ruta_completa):
                return False
            
            # Registrar en base de datos de documentos
            nuevo_documento = {
                'matricula': matricula,
                'nombre_archivo': nombre_archivo,
                'tipo_documento': tipo_documento,
                'fecha_subida': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'estatus': 'Pendiente de revisi√≥n',
                'ruta_archivo': ruta_completa
            }
            
            nuevo_doc_df = pd.DataFrame([nuevo_documento])
            if self.df_documentos.empty:
                self.df_documentos = nuevo_doc_df
            else:
                self.df_documentos = pd.concat([self.df_documentos, nuevo_doc_df], ignore_index=True)
            
            # Guardar registro en servidor remoto
            return self.guardar_datos()
            
        except Exception as e:
            st.error(f"‚ùå Error al guardar documento: {e}")
            return False

# Instancia del sistema de inscritos
sistema_inscritos = SistemaInscritos()

# =============================================================================
# CONFIGURACI√ìN Y ESTILOS DEL WEBSITE P√öBLICO
# =============================================================================

def aplicar_estilos_publicos():
    """Aplicar estilos CSS para el website p√∫blico"""
    st.markdown("""
    <style>
    .main-header {
        font-size: 3.5rem;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 2rem;
        color: #A23B72;
        text-align: center;
        margin-bottom: 1.5rem;
        font-weight: 600;
    }
    .programa-card {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #2E86AB;
        margin-bottom: 1rem;
    }
    .testimonio {
        background-color: #e8f4f8;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #A23B72;
    }
    .btn-primary {
        background-color: #2E86AB;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
    }
    </style>
    """, unsafe_allow_html=True)

# =============================================================================
# DATOS EST√ÅTICOS DE LA INSTITUCI√ìN (SOLO INFORMACI√ìN P√öBLICA)
# =============================================================================

def obtener_programas_academicos():
    """Obtener lista de programas acad√©micos disponibles - SOLO INFORMACI√ìN P√öBLICA"""
    return [
        {
            "nombre": "Especialidad en Enfermer√≠a Cardiovascular",
            "duracion": "2 a√±os",
            "modalidad": "Presencial",
            "descripcion": "Formaci√≥n especializada en el cuidado de pacientes con patolog√≠as cardiovasculares.",
            "requisitos": ["Licenciatura en Enfermer√≠a", "C√©dula profesional", "2 a√±os de experiencia"]
        },
        {
            "nombre": "Licenciatura en Enfermer√≠a",
            "duracion": "4 a√±os",
            "modalidad": "Presencial",
            "descripcion": "Formaci√≥n integral en enfermer√≠a con enfoque en cardiolog√≠a.",
            "requisitos": ["Bachillerato terminado", "Promedio m√≠nimo 8.0"]
        },
        {
            "nombre": "Diplomado de Cardiolog√≠a B√°sica",
            "duracion": "6 meses",
            "modalidad": "H√≠brida",
            "descripcion": "Actualizaci√≥n en fundamentos de cardiolog√≠a para profesionales de la salud.",
            "requisitos": ["T√≠tulo profesional en √°rea de la salud"]
        },
        {
            "nombre": "Maestr√≠a en Ciencias Cardiol√≥gicas",
            "duracion": "2 a√±os",
            "modalidad": "Presencial",
            "descripcion": "Formaci√≥n de investigadores en el √°rea de ciencias cardiol√≥gicas.",
            "requisitos": ["Licenciatura en √°reas afines", "Promedio m√≠nimo 8.5"]
        }
    ]

def obtener_testimonios():
    """Obtener testimonios de estudiantes y egresados - SOLO INFORMACI√ìN P√öBLICA"""
    return [
        {
            "nombre": "Dra. Ana Mart√≠nez",
            "programa": "Especialidad en Enfermer√≠a Cardiovascular",
            "testimonio": "La especialidad me dio las herramientas para trabajar en la unidad de cardiolog√≠a del hospital m√°s importante del pa√≠s.",
            "foto": "üë©‚Äç‚öïÔ∏è"
        },
        {
            "nombre": "Lic. Carlos Rodr√≠guez",
            "programa": "Licenciatura en Enfermer√≠a",
            "testimonio": "La formaci√≥n con enfoque cardiol√≥gico me diferenci√≥ en el mercado laboral. ¬°Altamente recomendable!",
            "foto": "üë®‚Äç‚öïÔ∏è"
        },
        {
            "nombre": "Dr. Miguel Torres",
            "programa": "Diplomado de Cardiolog√≠a B√°sica",
            "testimonio": "Perfecto para actualizarse sin dejar de trabajar. Los profesores son expertos en su √°rea.",
            "foto": "üßë‚Äç‚öïÔ∏è"
        }
    ]

# =============================================================================
# SECCIONES DEL WEBSITE P√öBLICO
# =============================================================================

def mostrar_header():
    """Mostrar header del website"""
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<div class="main-header">üè• Escuela de Enfermer√≠a</div>', unsafe_allow_html=True)
        st.markdown('<div class="sub-header">Formando L√≠deres en Salud Cardiovascular</div>', unsafe_allow_html=True)
    
    st.markdown("---")

def mostrar_hero():
    """Secci√≥n hero principal"""
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("## üéì Excelencia Acad√©mica en Cardiolog√≠a")
        st.markdown("""
        ### **Forma parte de la instituci√≥n l√≠der en educaci√≥n cardiovascular**
        
        - üë®‚Äç‚öïÔ∏è **Claustro docente** de alto nivel
        - üè• **Vinculaci√≥n hospitalaria** con las mejores instituciones
        - üî¨ **Investigaci√≥n** de vanguardia
        - üíº **Bolsa de trabajo** exclusiva para egresados
        - üåê **Red de egresados** a nivel nacional
        
        *40 a√±os formando profesionales de excelencia en el cuidado cardiovascular*
        """)
        
        if st.button("üìù ¬°Inscr√≠bete Ahora!", key="hero_inscripcion", use_container_width=True):
            st.session_state.mostrar_formulario = True
            st.rerun()
    
    with col2:
        st.info("**üèõÔ∏è Instalaciones de Vanguardia**")
        st.write("""
        - Laboratorios especializados
        - Simuladores de alta fidelidad
        - Biblioteca especializada
        - Aulas tecnol√≥gicas
        """)

def mostrar_programas_academicos():
    """Mostrar oferta acad√©mica"""
    st.markdown('<div class="sub-header">üìö Nuestra Oferta Acad√©mica</div>', unsafe_allow_html=True)
    
    programas = obtener_programas_academicos()
    
    for i, programa in enumerate(programas):
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f'<div class="programa-card">', unsafe_allow_html=True)
                st.markdown(f"### **{programa['nombre']}**")
                st.markdown(f"**Duraci√≥n:** {programa['duracion']} | **Modalidad:** {programa['modalidad']}")
                st.markdown(f"{programa['descripcion']}")
                
                with st.expander("üìã Ver requisitos"):
                    for requisito in programa['requisitos']:
                        st.write(f"‚Ä¢ {requisito}")
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.write("")  # Espacio
                if st.button(f"üéØ Solicitar Informes", key=f"info_{i}", use_container_width=True):
                    st.session_state.programa_seleccionado = programa['nombre']
                    st.session_state.mostrar_formulario = True
                    st.rerun()

def mostrar_testimonios():
    """Mostrar testimonios de estudiantes y egresados"""
    st.markdown("---")
    st.markdown('<div class="sub-header">üåü Testimonios de Nuestra Comunidad</div>', unsafe_allow_html=True)
    
    testimonios = obtener_testimonios()
    cols = st.columns(3)
    
    for i, testimonio in enumerate(testimonios):
        with cols[i]:
            st.markdown(f'<div class="testimonio">', unsafe_allow_html=True)
            st.markdown(f"### {testimonio['foto']}")
            st.markdown(f"**{testimonio['nombre']}**")
            st.markdown(f"*{testimonio['programa']}*")
            st.markdown(f"\"{testimonio['testimonio']}\"")
            st.markdown('</div>', unsafe_allow_html=True)

def mostrar_formulario_inscripcion():
    """Mostrar formulario de pre-inscripci√≥n para inscritos - CORREGIDO"""
    st.markdown("---")
    st.markdown('<div class="sub-header">üìù Formulario de Pre-Inscripci√≥n</div>', unsafe_allow_html=True)
    
    if 'formulario_enviado' not in st.session_state:
        st.session_state.formulario_enviado = False
    
    if not st.session_state.formulario_enviado:
        with st.form("formulario_inscripcion", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre_completo = st.text_input("üë§ Nombre Completo *", placeholder="Ej: Mar√≠a Gonz√°lez L√≥pez")
                email = st.text_input("üìß Correo Electr√≥nico *", placeholder="ejemplo@email.com")
                programa_interes = st.selectbox(
                    "üéØ Programa de Inter√©s *",
                    [p['nombre'] for p in obtener_programas_academicos()]
                )
            
            with col2:
                telefono = st.text_input("üìû Tel√©fono *", placeholder="5512345678")
                
                # FECHA DE NACIMIENTO CON RANGO DESDE 1980
                fecha_actual = date.today()
                fecha_minima = date(1980, 1, 1)
                fecha_maxima = fecha_actual
                
                fecha_nacimiento = st.date_input(
                    "üéÇ Fecha de Nacimiento",
                    min_value=fecha_minima,
                    max_value=fecha_maxima,
                    value=None,
                    format="YYYY-MM-DD"
                )
                
                # OPCIONES PARA "¬øC√ìMO SE ENTER√ì?"
                opciones_como_se_entero = ["Redes Sociales", "Google/Buscador", "Recomendaci√≥n", "Evento", "Otro"]
                como_se_entero = st.selectbox(
                    "üîç ¬øC√≥mo se enter√≥ de nosotros? *",
                    opciones_como_se_entero
                )
            
            # Documentos requeridos
            st.markdown("### üìé Documentos Requeridos")
            st.info("Por favor, sube los siguientes documentos en formato PDF:")
            
            col_doc1, col_doc2 = st.columns(2)
            
            with col_doc1:
                acta_nacimiento = st.file_uploader("üìÑ Acta de Nacimiento", type=['pdf'], key="acta")
                curp = st.file_uploader("üÜî CURP", type=['pdf'], key="curp")
            
            with col_doc2:
                certificado = st.file_uploader("üéì √öltimo Grado de Estudios", type=['pdf'], key="certificado")
                foto = st.file_uploader("üì∑ Fotograf√≠a", type=['pdf', 'jpg', 'png'], key="foto")
            
            # T√©rminos y condiciones
            acepta_terminos = st.checkbox("‚úÖ Acepto los t√©rminos y condiciones del proceso de admisi√≥n *")
            
            enviado = st.form_submit_button("üöÄ Enviar Solicitud de Admisi√≥n", use_container_width=True)
            
            if enviado:
                # Validar campos obligatorios
                if not all([nombre_completo, email, telefono, programa_interes, acepta_terminos]):
                    st.error("‚ùå Por favor completa todos los campos obligatorios (*)")
                    return
                
                # Validar que se seleccion√≥ una opci√≥n en "¬øC√≥mo se enter√≥?"
                if not como_se_entero:
                    st.error("‚ùå Por favor selecciona c√≥mo te enteraste de nosotros")
                    return
                
                # Validar documentos requeridos
                documentos_requeridos = [acta_nacimiento, curp, certificado]
                nombres_docs = ["Acta de Nacimiento", "CURP", "Certificado de Estudios"]
                docs_faltantes = [nombres_docs[i] for i, doc in enumerate(documentos_requeridos) if doc is None]
                
                if docs_faltantes:
                    st.error(f"‚ùå Faltan los siguientes documentos: {', '.join(docs_faltantes)}")
                    return
                
                # Registrar inscrito
                with st.spinner("Procesando tu solicitud..."):
                    datos_inscrito = {
                        'nombre_completo': nombre_completo,
                        'email': email,
                        'telefono': telefono,
                        'programa_interes': programa_interes,
                        'fecha_nacimiento': fecha_nacimiento,
                        'como_se_entero': como_se_entero  # CORREGIDO: Guarda el texto, no el √≠ndice
                    }
                    
                    # PRIMERO guardar los documentos para tener sus nombres
                    documentos_guardados = 0
                    nombres_documentos = []
                    documentos_info = [
                        (acta_nacimiento, "ACTA_NACIMIENTO"),
                        (curp, "CURP"), 
                        (certificado, "CERTIFICADO_ESTUDIOS"),
                        (foto, "FOTOGRAFIA") if foto else None
                    ]
                    
                    # Generar matr√≠cula temporal para guardar documentos
                    matricula_temp = sistema_inscritos.generar_matricula_inscrito()
                    
                    for doc_info in documentos_info:
                        if doc_info and doc_info[0] is not None:
                            try:
                                if sistema_inscritos.guardar_documento(matricula_temp, nombre_completo, doc_info[1], doc_info[0]):
                                    documentos_guardados += 1
                                    # Obtener el nombre del archivo guardado
                                    doc_guardado = sistema_inscritos.df_documentos[
                                        sistema_inscritos.df_documentos['matricula'] == matricula_temp
                                    ].iloc[-1]
                                    nombres_documentos.append(doc_guardado['nombre_archivo'])
                                    st.success(f"‚úÖ {doc_info[1]} guardado correctamente")
                                else:
                                    st.warning(f"‚ö†Ô∏è No se pudo guardar: {doc_info[1]}")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Error con {doc_info[1]}: {e}")
                    
                    # AHORA registrar el inscrito con los nombres de documentos
                    matricula, folio = sistema_inscritos.registrar_inscrito(datos_inscrito, nombres_documentos)
                    
                    if matricula and folio:
                        # Actualizar la matr√≠cula en los documentos guardados
                        if documentos_guardados > 0:
                            sistema_inscritos.df_documentos.loc[
                                sistema_inscritos.df_documentos['matricula'] == matricula_temp, 'matricula'
                            ] = matricula
                            sistema_inscritos.guardar_datos()
                        
                        st.session_state.formulario_enviado = True
                        st.session_state.datos_exitosos = {
                            'folio': folio,
                            'matricula': matricula,
                            'email': email,
                            'telefono': telefono,
                            'programa': programa_interes,
                            'documentos': documentos_guardados
                        }
                        st.rerun()
                    
                    else:
                        st.error("‚ùå Error al procesar la solicitud. Por favor intenta nuevamente.")
    
    else:
        # Mostrar resultados exitosos
        datos = st.session_state.datos_exitosos
        
        st.success("üéâ ¬°Solicitud enviada exitosamente!")
        
        col_res1, col_res2 = st.columns(2)
        with col_res1:
            st.info(f"**üìã Folio de solicitud:** {datos['folio']}")
            st.info(f"**üéì Matr√≠cula de inscrito:** {datos['matricula']}")
            st.info(f"**üìß Email de contacto:** {datos['email']}")
        
        with col_res2:
            st.info(f"**üìû Tel√©fono registrado:** {datos['telefono']}")
            st.info(f"**üéØ Programa de inter√©s:** {datos['programa']}")
            st.info(f"**üìé Documentos subidos:** {datos['documentos']}/4")
        
        st.markdown("---")
        st.markdown("### üì¨ Pr√≥ximos Pasos")
        st.markdown("""
        1. **Revisi√≥n de documentos** (2-3 d√≠as h√°biles)
        2. **Correo de confirmaci√≥n** con fecha de examen  
        3. **Examen de admisi√≥n** (presencial/online)
        4. **Entrevista personal** (si aplica)
        5. **Resultados finales** (5-7 d√≠as despu√©s del examen)
        
        *Te contactaremos al correo proporcionado para informarte los siguientes pasos.*
        """)
        
        col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
        with col_btn2:
            if st.button("üìù Realizar otra pre-inscripci√≥n", use_container_width=True):
                st.session_state.formulario_enviado = False
                st.session_state.mostrar_formulario = False
                st.rerun()

def mostrar_footer():
    """Mostrar footer del website"""
    st.markdown("---")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("### üè• Instituto")
        st.markdown("""
        - Nuestra historia
        - Misi√≥n y visi√≥n
        - Directiva
        - Instalaciones
        """)
    
    with col2:
        st.markdown("### üìö Programas")
        st.markdown("""
        - Licenciaturas
        - Especialidades
        - Maestr√≠as
        - Diplomados
        """)
    
    with col3:
        st.markdown("### üìû Contacto")
        st.markdown("""
        - Tel: 55-1234-5678
        - Email: admisiones@cardio.edu.mx
        - Direcci√≥n: Av. Instituto 123
        - Horario: 9:00 - 18:00 hrs
        """)
    
    with col4:
        st.markdown("### üîó S√≠guenos")
        st.markdown("""
        - Facebook
        - Twitter
        - Instagram
        - LinkedIn
        """)
    
    st.markdown("---")
    st.markdown("<center>¬© 2024 Instituto Nacional de Cardiolog√≠a. Todos los derechos reservados.</center>", unsafe_allow_html=True)

# =============================================================================
# P√ÅGINA PRINCIPAL DEL WEBSITE
# =============================================================================

def main():
    # Aplicar estilos
    aplicar_estilos_publicos()
    
    # Inicializar estado de sesi√≥n
    if 'mostrar_formulario' not in st.session_state:
        st.session_state.mostrar_formulario = False
    if 'programa_seleccionado' not in st.session_state:
        st.session_state.programa_seleccionado = None
    if 'formulario_enviado' not in st.session_state:
        st.session_state.formulario_enviado = False
    
    # Mostrar secciones del website
    mostrar_header()
    
    if not st.session_state.mostrar_formulario:
        mostrar_hero()
        mostrar_programas_academicos()
        mostrar_testimonios()
    else:
        mostrar_formulario_inscripcion()
    
    mostrar_footer()

if __name__ == "__main__":
    main()
