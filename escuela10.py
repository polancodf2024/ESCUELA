import streamlit as st
import pandas as pd
import numpy as np
import os
import json
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import paramiko
from io import StringIO, BytesIO
import time
import hashlib
import base64
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Sistema Acad√©mico Principal - Instituto Nacional de Cardiolog√≠a",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================================================
# SISTEMA DE CARGA REMOTA VIA SSH - SOLO CARGA REMOTA
# =============================================================================

class CargadorRemoto:
    def __init__(self):
        self.ssh = None
        self.sftp = None
        
    def conectar(self):
        """Establecer conexi√≥n SSH con el servidor remoto"""
        try:
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(
                hostname=st.secrets["remote_host"],
                port=st.secrets["remote_port"],
                username=st.secrets["remote_user"],
                password=st.secrets["remote_password"],
                timeout=30
            )
            self.sftp = self.ssh.open_sftp()
            return True
        except Exception as e:
            st.error(f"‚ùå Error de conexi√≥n SSH: {e}")
            return False
    
    def desconectar(self):
        """Cerrar conexi√≥n SSH"""
        try:
            if self.sftp:
                self.sftp.close()
            if self.ssh:
                self.ssh.close()
        except:
            pass
    
    def cargar_csv_remoto(self, ruta_remota):
        """Cargar archivo CSV desde el servidor remoto - SIN DATOS DE EJEMPLO"""
        try:
            if not self.conectar():
                return pd.DataFrame()  # Devuelve DataFrame vac√≠o si no puede conectar
            
            # Verificar si el archivo existe en el servidor remoto
            try:
                self.sftp.stat(ruta_remota)
            except FileNotFoundError:
                st.warning(f"üìÅ Archivo remoto no encontrado: {os.path.basename(ruta_remota)}")
                return pd.DataFrame()  # DataFrame vac√≠o si no existe
            
            # Leer archivo remoto
            with self.sftp.file(ruta_remota, 'r') as archivo_remoto:
                # Intentar diferentes codificaciones
                try:
                    df = pd.read_csv(archivo_remoto, encoding='utf-8')
                except UnicodeDecodeError:
                    archivo_remoto.seek(0)
                    df = pd.read_csv(archivo_remoto, encoding='latin-1')
                
            st.success(f"‚úÖ {os.path.basename(ruta_remota)} cargado desde servidor ({len(df)} registros)")
            return df
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error cargando {os.path.basename(ruta_remota)}: {str(e)}")
            return pd.DataFrame()  # Siempre devuelve DataFrame vac√≠o en caso de error
        finally:
            self.desconectar()
    
    def cargar_todos_los_datos(self):
        """Cargar todos los archivos CSV del servidor remoto - SOLO CARGA REMOTA"""
        
        # RUTAS CORREGIDAS SEG√öN LA ESTRUCTURA DEL SERVIDOR
        BASE_DIR_REMOTO = "/home/POLANCO6/ESCUELA"
        
        rutas_remotas = {
            'inscritos': os.path.join(BASE_DIR_REMOTO, "datos", "inscritos.csv"),
            'estudiantes': os.path.join(BASE_DIR_REMOTO, "datos", "estudiantes.csv"),
            'egresados': os.path.join(BASE_DIR_REMOTO, "datos", "egresados.csv"),
            'contratados': os.path.join(BASE_DIR_REMOTO, "datos", "contratados.csv"),
            'actualizaciones_academicas': os.path.join(BASE_DIR_REMOTO, "datos", "actualizaciones_academicas.csv"),
            'certificaciones': os.path.join(BASE_DIR_REMOTO, "datos", "certificaciones.csv"),
            'programas_educativos': os.path.join(BASE_DIR_REMOTO, "datos", "programas_educativos.csv"),
            'costos_programas': os.path.join(BASE_DIR_REMOTO, "datos", "costos_programas.csv"),
            'usuarios': os.path.join(BASE_DIR_REMOTO, "config", "usuarios.csv"),
            'roles_permisos': os.path.join(BASE_DIR_REMOTO, "config", "roles_permisos.csv"),
            'bitacora': os.path.join(BASE_DIR_REMOTO, "datos", "bitacora.csv")
        }
        
        datos_cargados = {}
        
        with st.spinner("üåê Conectando al servidor remoto..."):
            for nombre, ruta_remota in rutas_remotas.items():
                # SOLO CARGAR DESDE REMOTO, NO USAR DATOS DE EJEMPLO
                datos_cargados[nombre] = self.cargar_csv_remoto(ruta_remota)
        
        return datos_cargados

# Instanciar el cargador remoto
cargador_remoto = CargadorRemoto()

# =============================================================================
# CARGA DE TODOS LOS DATOS DESDE EL SERVIDOR REMOTO - SIN CACHE TEMPORAL
# =============================================================================

def cargar_datos_completos():
    """Cargar todos los datos desde el servidor remoto - SIN CACHE"""
    return cargador_remoto.cargar_todos_los_datos()

# Cargar todos los datos SIN cache para forzar carga remota
datos = cargar_datos_completos()

# Asignar a variables globales
df_inscritos = datos.get('inscritos', pd.DataFrame())
df_estudiantes = datos.get('estudiantes', pd.DataFrame())
df_egresados = datos.get('egresados', pd.DataFrame())
df_contratados = datos.get('contratados', pd.DataFrame())
df_actualizaciones = datos.get('actualizaciones_academicas', pd.DataFrame())
df_certificaciones = datos.get('certificaciones', pd.DataFrame())
df_programas = datos.get('programas_educativos', pd.DataFrame())
df_costos = datos.get('costos_programas', pd.DataFrame())
df_usuarios = datos.get('usuarios', pd.DataFrame())
df_roles = datos.get('roles_permisos', pd.DataFrame())
df_bitacora = datos.get('bitacora', pd.DataFrame())

# =============================================================================
# SISTEMA DE ENV√çO DE EMAILS - VERSI√ìN MEJORADA CON COPIA A NOTIFICATION_EMAIL
# =============================================================================

class SistemaEmail:
    def __init__(self):
        self.config = self.obtener_configuracion_email()
        
    def obtener_configuracion_email(self):
        """Obtiene la configuraci√≥n de email desde secrets.toml"""
        try:
            return {
                'smtp_server': st.secrets.get("smtp_server", "smtp.gmail.com"),
                'smtp_port': st.secrets.get("smtp_port", 587),
                'email_user': st.secrets.get("email_user", ""),
                'email_password': st.secrets.get("email_password", ""),
                'notification_email': st.secrets.get("notification_email", "")
            }
        except Exception as e:
            st.error(f"Error al cargar configuraci√≥n de email: {e}")
            return {}
    
    def verificar_configuracion_email(self):
        """Verificar que la configuraci√≥n de email est√© completa"""
        try:
            config = self.obtener_configuracion_email()
            email_user = config.get('email_user', '')
            email_password = config.get('email_password', '')
            notification_email = config.get('notification_email', '')
            
            if not email_user:
                st.error("‚ùå No se encontr√≥ 'email_user' en los secrets")
                return False
                
            if not email_password:
                st.error("‚ùå No se encontr√≥ 'email_password' en los secrets")
                return False
                
            if not notification_email:
                st.error("‚ùå No se encontr√≥ 'notification_email' en los secrets")
                return False
                
            st.success("‚úÖ Configuraci√≥n de email encontrada en secrets")
            st.info(f"üìß Remitente: {email_user}")
            st.info(f"üìß Email de notificaci√≥n: {notification_email}")
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error verificando configuraci√≥n: {e}")
            return False
    
    def test_conexion_smtp(self):
        """Probar conexi√≥n SMTP para diagn√≥stico"""
        try:
            config = self.obtener_configuracion_email()
            email_user = config.get('email_user', '')
            email_password = config.get('email_password', '')
            
            if not email_user or not email_password:
                return False, "Credenciales no configuradas"
                
            server = smtplib.SMTP(config['smtp_server'], config['smtp_port'])
            server.starttls()
            server.login(email_user, email_password)
            server.quit()
            
            return True, "‚úÖ Conexi√≥n SMTP exitosa"
            
        except Exception as e:
            return False, f"‚ùå Error SMTP: {e}"
    
    def obtener_email_usuario(self, usuario):
        """Obtener email del usuario desde el archivo usuarios.csv"""
        try:
            if df_usuarios.empty:
                st.warning("‚ö†Ô∏è No hay datos de usuarios disponibles")
                return None
            
            if 'usuario' not in df_usuarios.columns or 'email' not in df_usuarios.columns:
                st.warning("‚ö†Ô∏è Las columnas 'usuario' o 'email' no existen en usuarios.csv")
                return None
            
            # Buscar usuario en el DataFrame
            usuario_data = df_usuarios[df_usuarios['usuario'].astype(str).str.strip() == str(usuario).strip()]
            
            if usuario_data.empty:
                st.warning(f"‚ö†Ô∏è Usuario '{usuario}' no encontrado en usuarios.csv")
                return None
            
            email = usuario_data.iloc[0]['email']
            
            if pd.isna(email) or str(email).strip() == '':
                st.warning(f"‚ö†Ô∏è Usuario '{usuario}' no tiene email registrado")
                return None
            
            return str(email).strip()
            
        except Exception as e:
            st.error(f"‚ùå Error obteniendo email del usuario: {e}")
            return None

    def enviar_notificacion_email(self, datos_inscripcion, documentos_guardados, es_completado=False):
        """Env√≠a notificaci√≥n por email cuando se completa una inscripci√≥n - ADAPTADO DE ESCUELA10.PY"""
        try:
            config = self.obtener_configuracion_email()
            
            if not config.get('email_user') or not config.get('email_password'):
                st.warning("‚ö†Ô∏è Configuraci√≥n de email no disponible")
                return False
            
            # Obtener email del usuario destino desde usuarios.csv
            usuario_destino = datos_inscripcion.get('usuario', '')
            email_destino = self.obtener_email_usuario(usuario_destino)
            
            if not email_destino:
                st.warning(f"‚ö†Ô∏è No se pudo obtener email para el usuario: {usuario_destino}")
                # Usar el email del formulario como respaldo
                email_destino = datos_inscripcion.get('email', '')
                if not email_destino:
                    st.error("‚ùå No se pudo determinar el email destino")
                    return False
            
            # Configurar servidor SMTP
            server = smtplib.SMTP(config['smtp_server'], config['smtp_port'])
            server.starttls()
            server.login(config['email_user'], config['email_password'])
            
            # Crear mensaje
            msg = MIMEMultipart()
            msg['From'] = config['email_user']
            msg['To'] = email_destino
            msg['Cc'] = config['notification_email']  # AGREGAR COPIA AL EMAIL DE NOTIFICACI√ìN
            msg['Subject'] = f"‚úÖ Confirmaci√≥n de Proceso - Instituto Nacional de Cardiolog√≠a"
            
            # Determinar tipo de proceso
            if es_completado:
                tipo_proceso = "COMPLETADO"
                titulo = "‚úÖ PROCESO COMPLETADO EXITOSAMENTE"
                mensaje_estado = "ha sido completado exitosamente"
            else:
                tipo_proceso = "PROGRESO GUARDADO"
                titulo = "üíæ PROGRESO GUARDADO CORRECTAMENTE"
                mensaje_estado = "se ha guardado correctamente"
            
            # Cuerpo del email con formato HTML mejorado
            cuerpo_html = f"""
            <html>
            <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
                <div style="max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
                    <div style="text-align: center; background: linear-gradient(135deg, #003366 0%, #00509e 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;">
                        <h2 style="margin: 0; font-size: 24px;">Instituto Nacional de Cardiolog√≠a</h2>
                        <h3 style="margin: 10px 0 0 0; font-size: 18px; font-weight: normal;">Escuela de Enfermer√≠a</h3>
                    </div>
                    
                    <div style="padding: 20px;">
                        <h3 style="color: #27ae60; margin-top: 0;">{titulo}</h3>
                        
                        <p>Estimado(a) <strong>{datos_inscripcion.get('nombre_completo', 'Usuario')}</strong>,</p>
                        
                        <p>Le informamos que su proceso {mensaje_estado} en nuestro sistema acad√©mico.</p>
                        
                        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0;">
                            <p style="font-weight: bold; margin-bottom: 10px;">üìã Detalles del proceso:</p>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;"><strong>Usuario:</strong></td>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;">{usuario_destino}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;"><strong>Matr√≠cula:</strong></td>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;">{datos_inscripcion.get('matricula', 'N/A')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;"><strong>Tipo de proceso:</strong></td>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;">{tipo_proceso}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;"><strong>Fecha y hora:</strong></td>
                                    <td style="padding: 5px; border-bottom: 1px solid #eee;">{datetime.now().strftime('%d/%m/%Y %H:%M')}</td>
                                </tr>
                            </table>
                        </div>
                        
                        <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 15px 0;">
                            <p style="font-weight: bold; margin-bottom: 10px;">üìÑ Documentos procesados:</p>
                            <p>Total de documentos: <strong>{len(documentos_guardados)}</strong></p>
                            <ul style="margin: 10px 0; padding-left: 20px;">
                                {''.join([f'<li>{doc.get("nombre_original", "Documento")}</li>' for doc in documentos_guardados])}
                            </ul>
                        </div>
                        
                        <p>El estado actual de su solicitud es: <strong style="color: #27ae60;">{tipo_proceso}</strong></p>
                        
                        <p>Si usted no realiz√≥ esta acci√≥n o tiene alguna duda, por favor contacte al administrador del sistema inmediatamente.</p>
                        
                        <div style="margin-top: 20px; padding: 15px; background-color: #fff3cd; border-radius: 5px;">
                            <p style="margin: 0; font-size: 12px; color: #856404;">
                                <strong>‚ö†Ô∏è Informaci√≥n importante:</strong><br>
                                ‚Ä¢ Este es un mensaje autom√°tico, por favor no responda a este email.<br>
                                ‚Ä¢ Sistema Acad√©mico - Instituto Nacional de Cardiolog√≠a<br>
                                ‚Ä¢ Copia enviada a: {config['notification_email']}
                            </p>
                        </div>
                    </div>
                </div>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(cuerpo_html, 'html'))
            
            # Enviar email con timeout - INCLUYENDO EL EMAIL DE NOTIFICACI√ìN EN LOS DESTINATARIOS
            destinatarios = [email_destino, config['notification_email']]
            
            server.sendmail(config['email_user'], destinatarios, msg.as_string())
            server.quit()
            
            st.success(f"‚úÖ Email de confirmaci√≥n enviado exitosamente a: {email_destino}")
            st.success(f"‚úÖ Copia enviada a: {config['notification_email']}")
            return True
            
        except smtplib.SMTPAuthenticationError:
            st.error("‚ùå Error de autenticaci√≥n SMTP. Verifica:")
            st.error("1. Tu email y contrase√±a de aplicaci√≥n")
            st.error("2. Que hayas habilitado la verificaci√≥n en 2 pasos")
            st.error("3. Que hayas creado una contrase√±a de aplicaci√≥n")
            return False
            
        except smtplib.SMTPConnectError:
            st.error("‚ùå Error de conexi√≥n SMTP. Verifica:")
            st.error("1. Tu conexi√≥n a internet")
            st.error("2. Que el puerto 587 no est√© bloqueado")
            return False
            
        except Exception as e:
            st.error(f"‚ùå Error inesperado al enviar email: {e}")
            return False

    def enviar_email_confirmacion(self, usuario_destino, nombre_usuario, tipo_documento, nombre_archivo, tipo_accion="subida"):
        """Enviar email de confirmaci√≥n al usuario con copia a notification_email - M√âTODO COMPATIBLE"""
        # Crear estructura de datos compatible
        datos_inscripcion = {
            'usuario': usuario_destino,
            'nombre_completo': nombre_usuario,
            'matricula': 'Sistema',
            'email': self.obtener_email_usuario(usuario_destino) or ''
        }
        
        documentos_guardados = [{
            'nombre_original': f"{tipo_documento} - {nombre_archivo}",
            'tipo': tipo_documento
        }]
        
        es_completado = (tipo_accion == "completado")
        
        return self.enviar_notificacion_email(datos_inscripcion, documentos_guardados, es_completado)

# Instancia del sistema de email
sistema_email = SistemaEmail()

# =============================================================================
# SISTEMA DE AUTENTICACI√ìN Y SEGURIDAD - VERSI√ìN MEJORADA
# =============================================================================

class SistemaAutenticacion:
    def __init__(self):
        self.usuarios = df_usuarios
        self.sesion_activa = False
        self.usuario_actual = None
        
    def hash_password(self, password):
        """Hash simple para contrase√±as"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    def verificar_login(self, usuario, password):
        """Verificar credenciales de usuario - VERSI√ìN CORREGIDA CON B√öSQUEDA FLEXIBLE"""
        try:
            if self.usuarios.empty:
                st.error("‚ùå No se pudieron cargar los usuarios del sistema")
                return False
            
            if 'usuario' not in self.usuarios.columns:
                st.error("‚ùå La columna 'usuario' no existe en la base de datos")
                return False
            
            # ‚úÖ CORRECCI√ìN: B√∫squeda flexible que ignora may√∫sculas/min√∫sculas y espacios
            usuario_input = str(usuario).strip().lower()
            
            # Buscar usuario (comparaci√≥n flexible)
            usuario_df = self.usuarios[
                self.usuarios['usuario'].astype(str).str.strip().str.lower() == usuario_input
            ]
            
            if usuario_df.empty:
                # ‚úÖ INTENTAR B√öSQUEDA PARCIAL si no se encuentra exacto
                usuario_df = self.usuarios[
                    self.usuarios['usuario'].astype(str).str.strip().str.lower().str.contains(usuario_input, na=False)
                ]
                
                if usuario_df.empty:
                    st.error(f"‚ùå Usuario '{usuario}' no encontrado")
                    usuarios_disponibles = list(self.usuarios['usuario'].astype(str).unique())
                    st.info(f"üìã Usuarios disponibles: {usuarios_disponibles}")
                    return False
                else:
                    st.warning(f"‚ö†Ô∏è Usuario '{usuario}' no encontrado exactamente, pero se encontr√≥: {usuario_df.iloc[0]['usuario']}")
                    # Usar el usuario encontrado
                    usuario_encontrado = usuario_df.iloc[0]['usuario']
                    usuario_df = self.usuarios[
                        self.usuarios['usuario'].astype(str).str.strip() == str(usuario_encontrado).strip()
                    ]
            
            contrase√±a_almacenada = usuario_df.iloc[0].get('password', '')
            
            if contrase√±a_almacenada is not None:
                contrase√±a_almacenada = str(contrase√±a_almacenada).strip()
            
            # ‚úÖ COMPARACI√ìN CORREGIDA - Verificar contrase√±a directa o hash
            password_input = str(password).strip()
            
            if contrase√±a_almacenada == password_input or contrase√±a_almacenada == self.hash_password(password_input):
                usuario_real = usuario_df.iloc[0]['usuario']
                st.success(f"‚úÖ ¬°Bienvenido(a), {usuario_real}!")
                st.session_state.login_exitoso = True
                st.session_state.usuario_actual = usuario_df.iloc[0].to_dict()
                self.sesion_activa = True
                self.usuario_actual = usuario_df.iloc[0].to_dict()
                self.registrar_bitacora('LOGIN', f'Usuario {usuario_real} inici√≥ sesi√≥n')
                return True
            else:
                st.error("‚ùå Contrase√±a incorrecta")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error en verificar_login: {e}")
            # Mostrar m√°s detalles para diagn√≥stico
            st.info(f"Usuario buscado: '{usuario}'")
            if not self.usuarios.empty:
                st.info(f"Primeros usuarios disponibles: {list(self.usuarios['usuario'].astype(str).head(10))}")
            return False
            
    def registrar_bitacora(self, accion, detalles):
        """Registrar actividad en bit√°cora"""
        nueva_entrada = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'usuario': self.usuario_actual['usuario'] if self.usuario_actual else 'Sistema',
            'accion': accion,
            'detalles': detalles,
            'ip': 'localhost'
        }
        
        global df_bitacora
        if df_bitacora.empty:
            df_bitacora = pd.DataFrame([nueva_entrada])
        else:
            df_bitacora = pd.concat([df_bitacora, pd.DataFrame([nueva_entrada])], ignore_index=True)
    
    def cerrar_sesion(self):
        if self.sesion_activa:
            self.registrar_bitacora('LOGOUT', f'Usuario {self.usuario_actual["usuario"]} cerr√≥ sesi√≥n')
        self.sesion_activa = False
        self.usuario_actual = None

# Instancia global del sistema de autenticaci√≥n
auth = SistemaAutenticacion()

# =============================================================================
# SISTEMA DE GESTI√ìN ACAD√âMICA - MEJORADO PARA MOSTRAR DATOS PERSONALES
# =============================================================================

class SistemaAcademico:
    def __init__(self):
        self.inscritos = df_inscritos
        self.estudiantes = df_estudiantes
        self.egresados = df_egresados
        self.contratados = df_contratados
        self.programas = df_programas
        self.certificaciones = df_certificaciones
        self.costos = df_costos

    def obtener_datos_usuario_actual(self):
        """Obtener datos del usuario actual - VERSI√ìN MEJORADA"""
        if not st.session_state.login_exitoso:
            return pd.DataFrame()
            
        usuario_actual = st.session_state.usuario_actual.get('usuario', '')
        rol_actual = st.session_state.usuario_actual.get('rol', '').lower()
        
        st.info(f"üîç Buscando datos para usuario: {usuario_actual} (Rol: {rol_actual})")
        
        # Buscar en todos los datasets posibles
        datasets = []
        
        if rol_actual == 'inscrito' and not self.inscritos.empty:
            datasets.append(('inscritos', self.inscritos))
        elif rol_actual == 'estudiante' and not self.estudiantes.empty:
            datasets.append(('estudiantes', self.estudiantes))
        elif rol_actual == 'egresado' and not self.egresados.empty:
            datasets.append(('egresados', self.egresados))
        elif rol_actual == 'contratado' and not self.contratados.empty:
            datasets.append(('contratados', self.contratados))
        
        # Si no hay datasets espec√≠ficos para el rol, buscar en todos
        if not datasets:
            datasets = [
                ('inscritos', self.inscritos),
                ('estudiantes', self.estudiantes), 
                ('egresados', self.egresados),
                ('contratados', self.contratados)
            ]
        
        for nombre_dataset, dataset in datasets:
            if dataset.empty:
                continue
                
            # Buscar por diferentes campos posibles
            campos_busqueda = ['matricula', 'usuario', 'email', 'nombre']
            
            for campo in campos_busqueda:
                if campo in dataset.columns:
                    # Buscar coincidencia exacta
                    resultado = dataset[dataset[campo].astype(str).str.strip() == str(usuario_actual).strip()]
                    
                    if not resultado.empty:
                        st.success(f"‚úÖ Datos encontrados en {nombre_dataset} (campo: {campo})")
                        return resultado
            
            # Si no se encontr√≥ por coincidencia exacta, buscar por contenido
            for campo in campos_busqueda:
                if campo in dataset.columns:
                    # Buscar si el usuario est√° contenido en el campo
                    resultado = dataset[dataset[campo].astype(str).str.contains(str(usuario_actual), case=False, na=False)]
                    
                    if not resultado.empty:
                        st.success(f"‚úÖ Datos encontrados en {nombre_dataset} (b√∫squeda parcial en: {campo})")
                        return resultado
        
        st.warning(f"‚ö†Ô∏è No se encontraron datos personales para el usuario {usuario_actual}")
        st.info("‚ÑπÔ∏è Esto puede ser porque:")
        st.info("‚Ä¢ El usuario no tiene datos registrados en el sistema")
        st.info("‚Ä¢ Los nombres de columnas en los archivos CSV no coinciden")
        st.info("‚Ä¢ Los datos est√°n en un archivo diferente")
        
        # Mostrar estructura de los datasets para diagn√≥stico
        with st.expander("üîç Diagn√≥stico - Estructura de datos disponibles"):
            for nombre, dataset in [('inscritos', self.inscritos), 
                                  ('estudiantes', self.estudiantes),
                                  ('egresados', self.egresados),
                                  ('contratados', self.contratados)]:
                if not dataset.empty:
                    st.write(f"**{nombre}:** {len(dataset)} registros")
                    st.write(f"Columnas: {list(dataset.columns)}")
                    if len(dataset) > 0:
                        st.write("Primeras filas:")
                        st.dataframe(dataset.head(3))
        
        return pd.DataFrame()

    def obtener_certificaciones_usuario_actual(self):
        """Obtener certificaciones del usuario actual"""
        datos_usuario = self.obtener_datos_usuario_actual()
        
        if datos_usuario.empty or self.certificaciones.empty:
            return pd.DataFrame()
        
        # Obtener matr√≠cula del usuario
        if 'matricula' in datos_usuario.columns and 'matricula' in self.certificaciones.columns:
            matricula = datos_usuario.iloc[0]['matricula']
            return self.certificaciones[self.certificaciones['matricula'] == matricula]
        
        return pd.DataFrame()

# Instancia del sistema acad√©mico
academico = SistemaAcademico()

# =============================================================================
# SISTEMA DE EDICI√ìN Y GUARDADO REMOTO
# =============================================================================

class EditorRemoto:
    def __init__(self):
        self.cargador = cargador_remoto
    
    def obtener_ruta_archivo(self, tipo_datos):
        """Obtener ruta remota del archivo seg√∫n el tipo de datos"""
        rutas = {
            'inscritos': "/home/POLANCO6/ESCUELA/datos/inscritos.csv",
            'estudiantes': "/home/POLANCO6/ESCUELA/datos/estudiantes.csv",
            'egresados': "/home/POLANCO6/ESCUELA/datos/egresados.csv",
            'contratados': "/home/POLANCO6/ESCUELA/datos/contratados.csv",
            'actualizaciones_academicas': "/home/POLANCO6/ESCUELA/datos/actualizaciones_academicas.csv",
            'certificaciones': "/home/POLANCO6/ESCUELA/datos/certificaciones.csv",
            'programas_educativos': "/home/POLANCO6/ESCUELA/datos/programas_educativos.csv",
            'costos_programas': "/home/POLANCO6/ESCUELA/datos/costos_programas.csv",
            'usuarios': "/home/POLANCO6/ESCUELA/config/usuarios.csv",
            'roles_permisos': "/home/POLANCO6/ESCUELA/config/roles_permisos.csv",
            'bitacora': "/home/POLANCO6/ESCUELA/datos/bitacora.csv"
        }
        return rutas.get(tipo_datos, "")
    
    def guardar_dataframe_remoto(self, df, ruta_remota):
        """Guardar DataFrame en el servidor remoto"""
        try:
            if self.cargador.conectar():
                # Guardar DataFrame en un buffer en memoria
                buffer = StringIO()
                df.to_csv(buffer, index=False, encoding='utf-8')
                buffer.seek(0)
                
                # Subir al servidor remoto
                with self.cargador.sftp.file(ruta_remota, 'w') as archivo_remoto:
                    archivo_remoto.write(buffer.getvalue())
                
                self.cargador.desconectar()
                return True
                
        except Exception as e:
            st.error(f"‚ùå Error guardando archivo remoto: {e}")
            return False

# Instancia del editor remoto
editor = EditorRemoto()

# =============================================================================
# SISTEMA DOCUMENTAL - MEJORADO
# =============================================================================

class SistemaDocumental:
    def __init__(self):
        self.inscritos = df_inscritos
        self.estudiantes = df_estudiantes
        self.egresados = df_egresados
        self.contratados = df_contratados
        self.directorio_uploads = "/home/POLANCO6/ESCUELA/uploads"

    def obtener_documentos_usuario_actual(self):
        """Obtener documentos del usuario actual desde el sistema de archivos"""
        if not st.session_state.login_exitoso:
            return []
            
        # Obtener datos del usuario actual
        datos_usuario = academico.obtener_datos_usuario_actual()
        
        if datos_usuario.empty:
            st.warning("No se pudieron obtener datos del usuario para buscar documentos")
            return []
        
        # Obtener matr√≠cula del usuario
        campos_posibles = ['matricula', 'usuario', 'id']
        matricula = None
        
        for campo in campos_posibles:
            if campo in datos_usuario.columns:
                matricula = str(datos_usuario.iloc[0][campo])
                break
        
        if not matricula:
            st.warning("No se pudo identificar la matr√≠cula del usuario")
            return []
        
        documentos = []
        
        try:
            # Buscar archivos del usuario en el directorio uploads
            if cargador_remoto.conectar():
                try:
                    # Listar archivos en el directorio uploads
                    archivos = cargador_remoto.sftp.listdir(self.directorio_uploads)
                    
                    # Filtrar archivos que pertenezcan a esta matr√≠cula
                    for archivo in archivos:
                        if archivo.startswith(f"{matricula}_") or matricula in archivo:
                            documentos.append({
                                'nombre': archivo,
                                'ruta': os.path.join(self.directorio_uploads, archivo),
                                'tipo': self.obtener_tipo_documento(archivo),
                                'tama√±o': self.obtener_tama√±o_archivo(archivo)
                            })
                except FileNotFoundError:
                    st.warning(f"El directorio de uploads no existe: {self.directorio_uploads}")
                
                cargador_remoto.desconectar()
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è No se pudieron cargar documentos: {e}")
        
        return documentos

    def obtener_tipo_documento(self, nombre_archivo):
        """Determinar el tipo de documento basado en la extensi√≥n"""
        if nombre_archivo.lower().endswith('.pdf'):
            return "PDF"
        elif nombre_archivo.lower().endswith(('.jpg', '.jpeg', '.png')):
            return "Imagen"
        elif nombre_archivo.lower().endswith(('.doc', '.docx')):
            return "Documento Word"
        else:
            return "Archivo"

    def obtener_tama√±o_archivo(self, nombre_archivo):
        """Obtener tama√±o del archivo"""
        try:
            if cargador_remoto.conectar():
                ruta_completa = os.path.join(self.directorio_uploads, nombre_archivo)
                stats = cargador_remoto.sftp.stat(ruta_completa)
                cargador_remoto.desconectar()
                
                # Convertir bytes a KB o MB
                tama√±o_bytes = stats.st_size
                if tama√±o_bytes > 1024 * 1024:
                    return f"{tama√±o_bytes / (1024 * 1024):.1f} MB"
                else:
                    return f"{tama√±o_bytes / 1024:.1f} KB"
                    
        except:
            pass
        return "Desconocido"

    def descargar_documento(self, nombre_archivo):
        """Descargar documento desde el servidor remoto"""
        try:
            if cargador_remoto.conectar():
                ruta_remota = os.path.join(self.directorio_uploads, nombre_archivo)
                
                # Leer archivo del servidor
                with cargador_remoto.sftp.file(ruta_remota, 'rb') as archivo_remoto:
                    contenido = archivo_remoto.read()
                
                cargador_remoto.desconectar()
                
                # Determinar tipo MIME
                if nombre_archivo.lower().endswith('.pdf'):
                    mime_type = "application/pdf"
                elif nombre_archivo.lower().endswith(('.jpg', '.jpeg')):
                    mime_type = "image/jpeg"
                elif nombre_archivo.lower().endswith('.png'):
                    mime_type = "image/png"
                else:
                    mime_type = "application/octet-stream"
                
                # Crear bot√≥n de descarga
                st.download_button(
                    label=f"üì• Descargar {nombre_archivo}",
                    data=contenido,
                    file_name=nombre_archivo,
                    mime=mime_type,
                    key=f"doc_{nombre_archivo}"
                )
                return True
                
        except Exception as e:
            st.error(f"‚ùå Error al descargar {nombre_archivo}: {e}")
            return False

    def mostrar_documentos_usuario(self):
        """Mostrar documentos del usuario actual"""
        documentos_usuario = self.obtener_documentos_usuario_actual()
        
        if not documentos_usuario:
            st.info("üìÑ No hay documentos disponibles para descargar")
            return
        
        st.subheader("üìÇ Mis Documentos Disponibles")
        
        for documento in documentos_usuario:
            with st.expander(f"üìã {documento['nombre']}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Tipo:** {documento['tipo']}")
                    st.write(f"**Tama√±o:** {documento['tama√±o']}")
                    st.write(f"**Ubicaci√≥n:** {self.directorio_uploads}")
                
                with col2:
                    self.descargar_documento(documento['nombre'])

    def subir_documento(self, archivo, matricula, nombre_completo, tipo_documento):
        """Subir documento al servidor remoto y actualizar base de datos"""
        try:
            if cargador_remoto.conectar():
                # Generar nombre del archivo seg√∫n el formato especificado
                timestamp = datetime.now().strftime("%y-%m-%d.%H.%M")
                nombre_archivo = f"{matricula}.{nombre_completo}.{tipo_documento}.{timestamp}.pdf"
                
                # Limpiar nombre del archivo (remover caracteres especiales)
                nombre_archivo = "".join(c for c in nombre_archivo if c.isalnum() or c in ('.', '-', '_')).replace(' ', '_')
                
                ruta_remota = os.path.join(self.directorio_uploads, nombre_archivo)
                
                # Subir archivo al servidor
                with cargador_remoto.sftp.file(ruta_remota, 'wb') as archivo_remoto:
                    archivo_remoto.write(archivo.getvalue())
                
                # ACTUALIZAR CAMPO documentos_subidos EN LA BASE DE DATOS CORRESPONDIENTE
                self.actualizar_documentos_subidos(matricula, nombre_archivo, tipo_documento)
                
                cargador_remoto.desconectar()
                
                # ENVIAR EMAIL DE CONFIRMACI√ìN (con copia a notification_email)
                usuario_actual = st.session_state.usuario_actual.get('usuario', '')
                email_enviado = sistema_email.enviar_email_confirmacion(
                    usuario_actual,  # Usuario que subi√≥ el documento
                    nombre_completo, 
                    tipo_documento, 
                    nombre_archivo,
                    "subida"
                )
                
                if email_enviado:
                    st.success(f"‚úÖ Documento '{tipo_documento}' subido exitosamente y email enviado")
                else:
                    st.success(f"‚úÖ Documento '{tipo_documento}' subido exitosamente")
                    st.warning("‚ö†Ô∏è El documento se subi√≥ pero no se pudo enviar el email de confirmaci√≥n")
                
                st.info(f"üìÅ Guardado como: {nombre_archivo}")
                return True
                
        except Exception as e:
            st.error(f"‚ùå Error al subir documento: {e}")
            return False

    def actualizar_documentos_subidos(self, matricula, nombre_archivo, tipo_documento):
        """Actualizar campo documentos_subidos en la base de datos correspondiente"""
        try:
            # Determinar en qu√© DataFrame buscar seg√∫n el rol del usuario
            rol_actual = st.session_state.usuario_actual.get('rol', '').lower()
            
            if rol_actual == 'inscrito' and not self.inscritos.empty:
                df_actualizar = self.inscritos
                ruta_archivo = editor.obtener_ruta_archivo('inscritos')
            elif rol_actual == 'estudiante' and not self.estudiantes.empty:
                df_actualizar = self.estudiantes
                ruta_archivo = editor.obtener_ruta_archivo('estudiantes')
            elif rol_actual == 'egresado' and not self.egresados.empty:
                df_actualizar = self.egresados
                ruta_archivo = editor.obtener_ruta_archivo('egresados')
            elif rol_actual == 'contratado' and not self.contratados.empty:
                df_actualizar = self.contratados
                ruta_archivo = editor.obtener_ruta_archivo('contratados')
            else:
                return False
            
            # Buscar el registro del usuario - buscar por diferentes campos
            indice = None
            campos_busqueda = ['matricula', 'usuario', 'id']
            
            for campo in campos_busqueda:
                if campo in df_actualizar.columns:
                    coincidencias = df_actualizar[df_actualizar[campo].astype(str) == str(matricula)]
                    if not coincidencias.empty:
                        indice = coincidencias.index[0]
                        break
            
            if indice is None:
                st.warning(f"‚ö†Ô∏è No se encontr√≥ registro para matr√≠cula/usuario {matricula}")
                return False
            
            # Crear o actualizar el campo documentos_subidos
            if 'documentos_subidos' not in df_actualizar.columns:
                df_actualizar['documentos_subidos'] = ''
            
            # Obtener documentos actuales
            documentos_actuales = df_actualizar.at[indice, 'documentos_subidos']
            if pd.isna(documentos_actuales) or documentos_actuales == '':
                documentos_actuales = f"{tipo_documento}:{nombre_archivo}"
            else:
                documentos_actuales += f";{tipo_documento}:{nombre_archivo}"
            
            # Actualizar el campo
            df_actualizar.at[indice, 'documentos_subidos'] = documentos_actuales
            
            # Guardar en el servidor remoto
            if editor.guardar_dataframe_remoto(df_actualizar, ruta_archivo):
                st.success("üìù Campo 'documentos_subidos' actualizado en la base de datos")
                return True
            else:
                st.error("‚ùå Error al actualizar la base de datos")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error al actualizar documentos subidos: {e}")
            return False

    def obtener_documentos_requeridos(self, rol):
        """Obtener lista de documentos requeridos seg√∫n el rol"""
        documentos_requeridos = {
            'inscrito': [
                "CURP",
                "Acta de Nacimiento",
                "Comprobante de Estudios",
                "Fotograf√≠as Tama√±o Infantil",
                "Comprobante de Domicilio"
            ],
            'estudiante': [
                "Certificado de Estudios",
                "Historial Acad√©mico",
                "Comprobante de Pagos",
                "Constancia de Servicio Social"
            ],
            'egresado': [
                "T√≠tulo Profesional",
                "C√©dula Profesional",
                "Certificado de Estudios Completos",
                "Constancia de Egreso"
            ],
            'contratado': [
                "Contrato Laboral",
                "CURP",
                "Comprobante de Estudios",
                "Identificaci√≥n Oficial",
                "Comprobante de Domicilio"
            ]
        }
        return documentos_requeridos.get(rol.lower(), [])

# Instancia del sistema documental
documentos = SistemaDocumental()

# =============================================================================
# INTERFACES DE USUARIO POR ROL - MEJORADAS CON CAMPOS CORRECTOS
# =============================================================================

def mostrar_interfaz_inscrito():
    """Interfaz para usuarios con rol 'inscrito' - CAMPOS CORRECTOS"""
    st.title("üéì Portal del Inscrito")
    
    # Obtener datos del usuario actual
    datos_usuario = academico.obtener_datos_usuario_actual()
    
    if datos_usuario.empty:
        st.error("‚ùå No se pudieron cargar tus datos. Contacta al administrador.")
        return
    
    usuario_actual = datos_usuario.iloc[0]
    
    # Mostrar informaci√≥n personal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üë§ Informaci√≥n Personal")
        
        # CAMPOS CORRECTOS PARA INSCRITOS
        campos_inscritos = ['matricula', 'nombre_completo', 'programa', 'email', 
                           'telefono', 'fecha_nacimiento', 'genero', 'fecha_inscripcion', 'estatus']
        
        for campo in campos_inscritos:
            if campo in usuario_actual and pd.notna(usuario_actual[campo]):
                nombre_campo = campo.replace('_', ' ').title()
                st.write(f"**{nombre_campo}:** {usuario_actual[campo]}")
    
    with col2:
        st.subheader("üìä Estado")
        st.success("‚úÖ Inscrito")
        if 'estatus' in usuario_actual:
            st.write(f"**Estatus:** {usuario_actual['estatus']}")
    
    # SECCI√ìN MEJORADA: Edici√≥n con campos correctos
    st.markdown("---")
    st.subheader("‚úèÔ∏è Actualizar Informaci√≥n Personal")
    
    with st.form("editar_datos_inscrito"):
        st.write("**Modifica tus datos personales:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # CAMPOS CORRECTOS PARA INSCRITOS
            nueva_matricula = st.text_input("Matr√≠cula", 
                                          value=usuario_actual.get('matricula', ''))
            nuevo_nombre = st.text_input("Nombre completo", 
                                       value=usuario_actual.get('nombre_completo', ''))
            nuevo_programa = st.text_input("Programa", 
                                         value=usuario_actual.get('programa', ''))
            nuevo_email = st.text_input("Correo electr√≥nico", 
                                      value=usuario_actual.get('email', ''))
        
        with col2:
            # CAMPOS CORRECTOS PARA INSCRITOS
            nuevo_telefono = st.text_input("Tel√©fono", 
                                         value=usuario_actual.get('telefono', ''))
            nueva_fecha_nacimiento = st.text_input("Fecha de nacimiento",
                                                 value=usuario_actual.get('fecha_nacimiento', ''))
            nuevo_genero = st.selectbox("G√©nero", 
                                      ["Masculino", "Femenino", "Otro", "Prefiero no decir"],
                                      index=0)
            if 'genero' in usuario_actual:
                genero_actual = usuario_actual['genero']
                if genero_actual == 'Femenino':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=1)
                elif genero_actual == 'Otro':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=2)
                elif genero_actual == 'Prefiero no decir':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=3)
            
            nueva_fecha_inscripcion = st.text_input("Fecha de inscripci√≥n",
                                                  value=usuario_actual.get('fecha_inscripcion', ''))
            nuevo_estatus = st.selectbox("Estatus",
                                       ["Activo", "Inactivo", "En proceso"],
                                       index=0)
            if 'estatus' in usuario_actual:
                estatus_actual = usuario_actual['estatus']
                if estatus_actual == 'Inactivo':
                    nuevo_estatus = st.selectbox("Estatus", ["Activo", "Inactivo", "En proceso"], index=1)
                elif estatus_actual == 'En proceso':
                    nuevo_estatus = st.selectbox("Estatus", ["Activo", "Inactivo", "En proceso"], index=2)
        
        if st.form_submit_button("üíæ Guardar Cambios"):
            cambios = False
            actualizaciones = {}
            
            # Verificar y aplicar cambios para campos de inscritos
            campos_verificar = [
                ('matricula', nueva_matricula),
                ('nombre_completo', nuevo_nombre),
                ('programa', nuevo_programa),
                ('email', nuevo_email),
                ('telefono', nuevo_telefono),
                ('fecha_nacimiento', nueva_fecha_nacimiento),
                ('genero', nuevo_genero),
                ('fecha_inscripcion', nueva_fecha_inscripcion),
                ('estatus', nuevo_estatus)
            ]
            
            for campo, nuevo_valor in campos_verificar:
                if nuevo_valor and nuevo_valor != usuario_actual.get(campo, ''):
                    actualizaciones[campo] = nuevo_valor
                    cambios = True
            
            if cambios:
                try:
                    # Actualizar el DataFrame local
                    for campo, valor in actualizaciones.items():
                        df_inscritos.loc[usuario_actual.name, campo] = valor
                    
                    # Guardar en el servidor remoto
                    if editor.guardar_dataframe_remoto(df_inscritos, editor.obtener_ruta_archivo('inscritos')):
                        st.success("‚úÖ Cambios guardados exitosamente")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al guardar los cambios en el servidor")
                except Exception as e:
                    st.error(f"‚ùå Error al actualizar datos: {e}")
            else:
                st.info("‚ÑπÔ∏è No se realizaron cambios")
    
    # Gesti√≥n de documentos
    st.markdown("---")
    st.subheader("üìÅ Gesti√≥n de Documentos")
    
    # Mostrar documentos requeridos
    documentos_requeridos = documentos.obtener_documentos_requeridos('inscrito')
    st.write("**Documentos requeridos:**")
    for i, doc in enumerate(documentos_requeridos, 1):
        st.write(f"{i}. {doc}")
    
    # Subir documentos
    st.subheader("üì§ Subir Documentos")
    
    tipo_documento = st.selectbox(
        "Selecciona el tipo de documento:",
        documentos_requeridos,
        key="tipo_doc_inscrito"
    )
    
    archivo = st.file_uploader(
        "Selecciona el archivo:",
        type=['pdf', 'jpg', 'jpeg', 'png'],
        key="archivo_inscrito"
    )
    
    if archivo is not None and tipo_documento:
        if st.button("üì§ Subir Documento", key="btn_subir_inscrito"):
            nombre_completo = usuario_actual.get('nombre_completo', 'Usuario')
            matricula = usuario_actual.get('matricula', '')
            
            if documentos.subir_documento(archivo, matricula, nombre_completo, tipo_documento):
                st.success("‚úÖ Documento subido exitosamente")
                st.rerun()
    
    # Mostrar documentos existentes
    st.subheader("üìÇ Mis Documentos Subidos")
    documentos.mostrar_documentos_usuario()

def mostrar_interfaz_estudiante():
    """Interfaz para usuarios con rol 'estudiante' - CAMPOS CORRECTOS"""
    st.title("üéì Portal del Estudiante")
    
    # Obtener datos del usuario actual
    datos_usuario = academico.obtener_datos_usuario_actual()
    
    if datos_usuario.empty:
        st.error("‚ùå No se pudieron cargar tus datos. Contacta al administrador.")
        return
    
    usuario_actual = datos_usuario.iloc[0]
    
    # Mostrar informaci√≥n acad√©mica
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üë§ Informaci√≥n Acad√©mica")
        
        # CAMPOS CORRECTOS PARA ESTUDIANTES
        campos_estudiantes = ['matricula', 'nombre_completo', 'programa', 'email', 
                             'telefono', 'fecha_nacimiento', 'genero', 'fecha_inscripcion', 'estatus']
        
        for campo in campos_estudiantes:
            if campo in usuario_actual and pd.notna(usuario_actual[campo]):
                nombre_campo = campo.replace('_', ' ').title()
                st.write(f"**{nombre_campo}:** {usuario_actual[campo]}")
    
    with col2:
        st.subheader("üìä Estado Acad√©mico")
        st.success("‚úÖ Estudiante Activo")
        if 'estatus' in usuario_actual:
            st.write(f"**Estatus:** {usuario_actual['estatus']}")
    
    # SECCI√ìN MEJORADA: Edici√≥n con campos correctos
    st.markdown("---")
    st.subheader("‚úèÔ∏è Actualizar Informaci√≥n Acad√©mica")
    
    with st.form("editar_datos_estudiante"):
        st.write("**Modifica tus datos acad√©micos:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # CAMPOS CORRECTOS PARA ESTUDIANTES
            nueva_matricula = st.text_input("Matr√≠cula", 
                                          value=usuario_actual.get('matricula', ''),
                                          key="matricula_estudiante")
            nuevo_nombre = st.text_input("Nombre completo", 
                                       value=usuario_actual.get('nombre_completo', ''),
                                       key="nombre_estudiante")
            nuevo_programa = st.text_input("Programa", 
                                         value=usuario_actual.get('programa', ''),
                                         key="programa_estudiante")
            nuevo_email = st.text_input("Correo electr√≥nico", 
                                      value=usuario_actual.get('email', ''),
                                      key="email_estudiante")
        
        with col2:
            # CAMPOS CORRECTOS PARA ESTUDIANTES
            nuevo_telefono = st.text_input("Tel√©fono", 
                                         value=usuario_actual.get('telefono', ''),
                                         key="telefono_estudiante")
            nueva_fecha_nacimiento = st.text_input("Fecha de nacimiento",
                                                 value=usuario_actual.get('fecha_nacimiento', ''),
                                                 key="fecha_nacimiento_estudiante")
            nuevo_genero = st.selectbox("G√©nero", 
                                      ["Masculino", "Femenino", "Otro", "Prefiero no decir"],
                                      index=0,
                                      key="genero_estudiante")
            if 'genero' in usuario_actual:
                genero_actual = usuario_actual['genero']
                if genero_actual == 'Femenino':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=1, key="genero_estudiante2")
                elif genero_actual == 'Otro':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=2, key="genero_estudiante3")
                elif genero_actual == 'Prefiero no decir':
                    nuevo_genero = st.selectbox("G√©nero", ["Masculino", "Femenino", "Otro", "Prefiero no decir"], index=3, key="genero_estudiante4")
            
            nueva_fecha_inscripcion = st.text_input("Fecha de inscripci√≥n",
                                                  value=usuario_actual.get('fecha_inscripcion', ''),
                                                  key="fecha_inscripcion_estudiante")
            nuevo_estatus = st.selectbox("Estatus",
                                       ["Activo", "Inactivo", "Graduado"],
                                       index=0,
                                       key="estatus_estudiante")
            if 'estatus' in usuario_actual:
                estatus_actual = usuario_actual['estatus']
                if estatus_actual == 'Inactivo':
                    nuevo_estatus = st.selectbox("Estatus", ["Activo", "Inactivo", "Graduado"], index=1, key="estatus_estudiante2")
                elif estatus_actual == 'Graduado':
                    nuevo_estatus = st.selectbox("Estatus", ["Activo", "Inactivo", "Graduado"], index=2, key="estatus_estudiante3")
        
        if st.form_submit_button("üíæ Guardar Cambios"):
            cambios = False
            actualizaciones = {}
            
            # Verificar y aplicar cambios para campos de estudiantes
            campos_verificar = [
                ('matricula', nueva_matricula),
                ('nombre_completo', nuevo_nombre),
                ('programa', nuevo_programa),
                ('email', nuevo_email),
                ('telefono', nuevo_telefono),
                ('fecha_nacimiento', nueva_fecha_nacimiento),
                ('genero', nuevo_genero),
                ('fecha_inscripcion', nueva_fecha_inscripcion),
                ('estatus', nuevo_estatus)
            ]
            
            for campo, nuevo_valor in campos_verificar:
                if nuevo_valor and nuevo_valor != usuario_actual.get(campo, ''):
                    actualizaciones[campo] = nuevo_valor
                    cambios = True
            
            if cambios:
                try:
                    # Actualizar el DataFrame local
                    for campo, valor in actualizaciones.items():
                        df_estudiantes.loc[usuario_actual.name, campo] = valor
                    
                    # Guardar en el servidor remoto
                    if editor.guardar_dataframe_remoto(df_estudiantes, editor.obtener_ruta_archivo('estudiantes')):
                        st.success("‚úÖ Cambios guardados exitosamente")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al guardar los cambios en el servidor")
                except Exception as e:
                    st.error(f"‚ùå Error al actualizar datos: {e}")
            else:
                st.info("‚ÑπÔ∏è No se realizaron cambios")
    
    # Gesti√≥n de documentos
    st.markdown("---")
    st.subheader("üìÅ Gesti√≥n de Documentos Estudiantiles")
    
    # Mostrar documentos requeridos
    documentos_requeridos = documentos.obtener_documentos_requeridos('estudiante')
    st.write("**Documentos requeridos:**")
    for i, doc in enumerate(documentos_requeridos, 1):
        st.write(f"{i}. {doc}")
    
    # Subir documentos
    st.subheader("üì§ Subir Documentos")
    
    tipo_documento = st.selectbox(
        "Selecciona el tipo de documento:",
        documentos_requeridos,
        key="tipo_doc_estudiante"
    )
    
    archivo = st.file_uploader(
        "Selecciona el archivo:",
        type=['pdf', 'jpg', 'jpeg', 'png'],
        key="archivo_estudiante"
    )
    
    if archivo is not None and tipo_documento:
        if st.button("üì§ Subir Documento", key="btn_subir_estudiante"):
            nombre_completo = usuario_actual.get('nombre_completo', 'Usuario')
            matricula = usuario_actual.get('matricula', '')
            
            if documentos.subir_documento(archivo, matricula, nombre_completo, tipo_documento):
                st.success("‚úÖ Documento subido exitosamente")
                st.rerun()
    
    # Mostrar documentos existentes
    st.subheader("üìÇ Mis Documentos Acad√©micos")
    documentos.mostrar_documentos_usuario()

def mostrar_interfaz_egresado():
    """Interfaz para usuarios con rol 'egresado' - CAMPOS CORRECTOS"""
    st.title("üéì Portal del Egresado")
    
    # Obtener datos del usuario actual
    datos_usuario = academico.obtener_datos_usuario_actual()
    
    if datos_usuario.empty:
        st.error("‚ùå No se pudieron cargar tus datos. Contacta al administrador.")
        return
    
    usuario_actual = datos_usuario.iloc[0]
    
    # Mostrar informaci√≥n profesional
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üë§ Informaci√≥n Profesional")
        
        # CAMPOS CORRECTOS PARA EGRESADOS
        campos_egresados = ['matricula', 'nombre_completo', 'programa_original', 
                           'fecha_graduacion', 'nivel_academico', 'email', 'telefono', 
                           'estado_laboral', 'fecha_actualizacion']
        
        for campo in campos_egresados:
            if campo in usuario_actual and pd.notna(usuario_actual[campo]):
                nombre_campo = campo.replace('_', ' ').title()
                st.write(f"**{nombre_campo}:** {usuario_actual[campo]}")
    
    with col2:
        st.subheader("üìä Estado Profesional")
        st.success("‚úÖ Egresado")
        if 'estado_laboral' in usuario_actual:
            st.write(f"**Estado Laboral:** {usuario_actual['estado_laboral']}")
    
    # SECCI√ìN MEJORADA: Edici√≥n con campos correctos
    st.markdown("---")
    st.subheader("‚úèÔ∏è Actualizar Informaci√≥n Profesional")
    
    with st.form("editar_datos_egresado"):
        st.write("**Actualiza tu informaci√≥n profesional:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # CAMPOS CORRECTOS PARA EGRESADOS
            nueva_matricula = st.text_input("Matr√≠cula",
                                          value=usuario_actual.get('matricula', ''),
                                          key="matricula_egresado")
            nuevo_nombre = st.text_input("Nombre completo",
                                       value=usuario_actual.get('nombre_completo', ''),
                                       key="nombre_egresado")
            nuevo_programa_original = st.text_input("Programa original",
                                                  value=usuario_actual.get('programa_original', ''),
                                                  key="programa_original_egresado")
            nueva_fecha_graduacion = st.text_input("Fecha de graduaci√≥n",
                                                 value=usuario_actual.get('fecha_graduacion', ''),
                                                 key="fecha_graduacion_egresado")
            nuevo_nivel_academico = st.selectbox("Nivel acad√©mico",
                                               ["Licenciatura", "Maestr√≠a", "Doctorado", "Especialidad"],
                                               index=0,
                                               key="nivel_academico_egresado")
        
        with col2:
            # CAMPOS CORRECTOS PARA EGRESADOS
            nuevo_email = st.text_input("Correo electr√≥nico",
                                      value=usuario_actual.get('email', ''),
                                      key="email_egresado")
            nuevo_telefono = st.text_input("Tel√©fono",
                                         value=usuario_actual.get('telefono', ''),
                                         key="telefono_egresado")
            nuevo_estado_laboral = st.selectbox("Estado laboral",
                                              ["Empleado", "Desempleado", "Estudiando", "Emprendedor"],
                                              index=0,
                                              key="estado_laboral_egresado")
            nueva_fecha_actualizacion = st.text_input("Fecha de actualizaci√≥n",
                                                    value=usuario_actual.get('fecha_actualizacion', ''),
                                                    key="fecha_actualizacion_egresado")
        
        if st.form_submit_button("üíæ Guardar Cambios"):
            cambios = False
            actualizaciones = {}
            
            # Verificar y aplicar cambios para campos de egresados
            campos_verificar = [
                ('matricula', nueva_matricula),
                ('nombre_completo', nuevo_nombre),
                ('programa_original', nuevo_programa_original),
                ('fecha_graduacion', nueva_fecha_graduacion),
                ('nivel_academico', nuevo_nivel_academico),
                ('email', nuevo_email),
                ('telefono', nuevo_telefono),
                ('estado_laboral', nuevo_estado_laboral),
                ('fecha_actualizacion', nueva_fecha_actualizacion)
            ]
            
            for campo, nuevo_valor in campos_verificar:
                if nuevo_valor and nuevo_valor != usuario_actual.get(campo, ''):
                    actualizaciones[campo] = nuevo_valor
                    cambios = True
            
            if cambios:
                try:
                    # Actualizar el DataFrame local
                    for campo, valor in actualizaciones.items():
                        df_egresados.loc[usuario_actual.name, campo] = valor
                    
                    # Guardar en el servidor remoto
                    if editor.guardar_dataframe_remoto(df_egresados, editor.obtener_ruta_archivo('egresados')):
                        st.success("‚úÖ Cambios guardados exitosamente")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al guardar los cambios en el servidor")
                except Exception as e:
                    st.error(f"‚ùå Error al actualizar datos: {e}")
            else:
                st.info("‚ÑπÔ∏è No se realizaron cambios")
    
    # Gesti√≥n de documentos
    st.markdown("---")
    st.subheader("üìÅ Gesti√≥n de Documentos Profesionales")
    
    # Mostrar documentos requeridos
    documentos_requeridos = documentos.obtener_documentos_requeridos('egresado')
    st.write("**Documentos requeridos:**")
    for i, doc in enumerate(documentos_requeridos, 1):
        st.write(f"{i}. {doc}")
    
    # Subir documentos
    st.subheader("üì§ Subir Documentos")
    
    tipo_documento = st.selectbox(
        "Selecciona el tipo de documento:",
        documentos_requeridos,
        key="tipo_doc_egresado"
    )
    
    archivo = st.file_uploader(
        "Selecciona el archivo:",
        type=['pdf', 'jpg', 'jpeg', 'png'],
        key="archivo_egresado"
    )
    
    if archivo is not None and tipo_documento:
        if st.button("üì§ Subir Documento", key="btn_subir_egresado"):
            nombre_completo = usuario_actual.get('nombre_completo', 'Usuario')
            matricula = usuario_actual.get('matricula', '')
            
            if documentos.subir_documento(archivo, matricula, nombre_completo, tipo_documento):
                st.success("‚úÖ Documento subido exitosamente")
                st.rerun()
    
    # Mostrar documentos existentes
    st.subheader("üìÇ Mis Documentos Profesionales")
    documentos.mostrar_documentos_usuario()


def mostrar_interfaz_contratado():
    """Interfaz para usuarios con rol 'contratado' - CAMPOS ACTUALIZADOS"""
    st.title("üíº Portal del Personal Contratado")

    # Obtener datos del usuario actual
    datos_usuario = academico.obtener_datos_usuario_actual()

    if datos_usuario.empty:
        st.error("‚ùå No se pudieron cargar tus datos. Contacta al administrador.")
        return

    usuario_actual = datos_usuario.iloc[0]

    # Mostrar informaci√≥n laboral
    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("üë§ Informaci√≥n Laboral")

        # CAMPOS ACTUALIZADOS PARA CONTRATADOS
        campos_contratados = ['matricula', 'fecha_contratacion', 'puesto', 'departamento',
                             'estatus', 'salario', 'tipo_contrato', 'fecha_inicio', 'fecha_fin']

        for campo in campos_contratados:
            if campo in usuario_actual and pd.notna(usuario_actual[campo]):
                nombre_campo = campo.replace('_', ' ').title()
                st.write(f"**{nombre_campo}:** {usuario_actual[campo]}")

    with col2:
        st.subheader("üìä Estado Laboral")
        st.success("‚úÖ Contratado Activo")
        if 'estatus' in usuario_actual:
            st.write(f"**Estatus:** {usuario_actual['estatus']}")

    # SECCI√ìN MEJORADA: Edici√≥n con campos actualizados
    st.markdown("---")
    st.subheader("‚úèÔ∏è Actualizar Informaci√≥n Laboral")

    with st.form("editar_datos_contratado"):
        st.write("**Actualiza tu informaci√≥n laboral:**")

        col1, col2 = st.columns(2)

        with col1:
            # CAMPOS ACTUALIZADOS PARA CONTRATADOS
            nueva_matricula = st.text_input("Matr√≠cula",
                                          value=usuario_actual.get('matricula', ''),
                                          key="matricula_contratado")
            nueva_fecha_contratacion = st.text_input("Fecha de contrataci√≥n",
                                                   value=usuario_actual.get('fecha_contratacion', ''),
                                                   key="fecha_contratacion_contratado")
            nuevo_puesto = st.text_input("Puesto",
                                       value=usuario_actual.get('puesto', ''),
                                       key="puesto_contratado")
            nuevo_departamento = st.text_input("Departamento",
                                             value=usuario_actual.get('departamento', ''),
                                             key="departamento_contratado")

            # Configurar estatus actual correctamente
            estatus_opciones = ["Activo", "Inactivo", "Suspendido"]
            estatus_default = 0
            if 'estatus' in usuario_actual:
                estatus_actual = usuario_actual['estatus']
                if estatus_actual == 'Inactivo':
                    estatus_default = 1
                elif estatus_actual == 'Suspendido':
                    estatus_default = 2
            nuevo_estatus = st.selectbox("Estatus",
                                       estatus_opciones,
                                       index=estatus_default,
                                       key="estatus_contratado")

        with col2:
            # CAMPOS ACTUALIZADOS PARA CONTRATADOS
            nuevo_salario = st.text_input("Salario",
                                        value=usuario_actual.get('salario', ''),
                                        key="salario_contratado")

            # Configurar tipo de contrato actual correctamente
            tipo_contrato_opciones = ["Tiempo completo", "Medio tiempo", "Temporal", "Pr√°cticas"]
            tipo_contrato_default = 0
            if 'tipo_contrato' in usuario_actual:
                tipo_actual = usuario_actual['tipo_contrato']
                if tipo_actual == 'Medio tiempo':
                    tipo_contrato_default = 1
                elif tipo_actual == 'Temporal':
                    tipo_contrato_default = 2
                elif tipo_actual == 'Pr√°cticas':
                    tipo_contrato_default = 3
            nuevo_tipo_contrato = st.selectbox("Tipo de contrato",
                                             tipo_contrato_opciones,
                                             index=tipo_contrato_default,
                                             key="tipo_contrato_contratado")

            nueva_fecha_inicio = st.text_input("Fecha de inicio",
                                             value=usuario_actual.get('fecha_inicio', ''),
                                             key="fecha_inicio_contratado")
            nueva_fecha_fin = st.text_input("Fecha de fin",
                                          value=usuario_actual.get('fecha_fin', ''),
                                          key="fecha_fin_contratado")

        if st.form_submit_button("üíæ Guardar Cambios"):
            cambios = False
            actualizaciones = {}

            # Verificar y aplicar cambios para campos actualizados de contratados
            campos_verificar = [
                ('matricula', nueva_matricula),
                ('fecha_contratacion', nueva_fecha_contratacion),
                ('puesto', nuevo_puesto),
                ('departamento', nuevo_departamento),
                ('estatus', nuevo_estatus),
                ('salario', nuevo_salario),
                ('tipo_contrato', nuevo_tipo_contrato),
                ('fecha_inicio', nueva_fecha_inicio),
                ('fecha_fin', nueva_fecha_fin)
            ]

            for campo, nuevo_valor in campos_verificar:
                valor_actual = usuario_actual.get(campo, '')
                if str(nuevo_valor).strip() != str(valor_actual).strip():
                    actualizaciones[campo] = nuevo_valor
                    cambios = True

            if cambios:
                try:
                    # Actualizar el DataFrame local
                    for campo, valor in actualizaciones.items():
                        df_contratados.loc[usuario_actual.name, campo] = valor

                    # Guardar en el servidor remoto
                    if editor.guardar_dataframe_remoto(df_contratados, editor.obtener_ruta_archivo('contratados')):
                        st.success("‚úÖ Cambios guardados exitosamente")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al guardar los cambios en el servidor")
                except Exception as e:
                    st.error(f"‚ùå Error al actualizar datos: {e}")
            else:
                st.info("‚ÑπÔ∏è No se realizaron cambios")

    # Gesti√≥n de documentos
    st.markdown("---")
    st.subheader("üìÅ Gesti√≥n de Documentos Laborales")

    # Mostrar documentos requeridos
    documentos_requeridos = documentos.obtener_documentos_requeridos('contratado')
    st.write("**Documentos requeridos:**")
    for i, doc in enumerate(documentos_requeridos, 1):
        st.write(f"{i}. {doc}")

    # Subir documentos
    st.subheader("üì§ Subir Documentos")

    tipo_documento = st.selectbox(
        "Selecciona el tipo de documento:",
        documentos_requeridos,
        key="tipo_doc_contratado"
    )

    archivo = st.file_uploader(
        "Selecciona el archivo:",
        type=['pdf', 'jpg', 'jpeg', 'png'],
        key="archivo_contratado"
    )

    if archivo is not None and tipo_documento:
        if st.button("üì§ Subir Documento", key="btn_subir_contratado"):
            nombre_completo = usuario_actual.get('nombre', 'Usuario')
            matricula = usuario_actual.get('matricula', '')

            if documentos.subir_documento(archivo, matricula, nombre_completo, tipo_documento):
                st.success("‚úÖ Documento subido exitosamente")
                st.rerun()

    # Mostrar documentos existentes
    st.subheader("üìÇ Mis Documentos Laborales")
    documentos.mostrar_documentos_usuario()

# =============================================================================
# INTERFAZ DE ADMINISTRADOR - COMPLETA
# =============================================================================

def mostrar_interfaz_administrador():
    """Interfaz para usuarios con rol 'administrador'"""
    st.title("‚öôÔ∏è Panel de Administraci√≥n")
    
    # Verificar que el usuario actual es administrador
    if not st.session_state.login_exitoso or st.session_state.usuario_actual.get('rol') != 'administrador':
        st.error("‚ùå No tienes permisos de administrador")
        return
    
    # Men√∫ de administraci√≥n
    opcion = st.sidebar.selectbox(
        "Men√∫ de Administraci√≥n",
        [
            "üìä Dashboard General",
            "üë• Gesti√≥n de Usuarios", 
            "üìÅ Gesti√≥n de Documentos",
            "üìß Configuraci√≥n de Email",
            "üîê Roles y Permisos",
            "üìà Reportes y Estad√≠sticas",
            "üîç Verificaci√≥n de Datos"
        ]
    )
    
    if opcion == "üìä Dashboard General":
        mostrar_dashboard_administrador()
    elif opcion == "üë• Gesti√≥n de Usuarios":
        mostrar_gestion_usuarios()
    elif opcion == "üìÅ Gesti√≥n de Documentos":
        mostrar_gestion_documentos()
    elif opcion == "üìß Configuraci√≥n de Email":
        mostrar_configuracion_email()
    elif opcion == "üîê Roles y Permisos":
        mostrar_roles_permisos()
    elif opcion == "üìà Reportes y Estad√≠sticas":
        mostrar_reportes_estadisticas()
    elif opcion == "üîç Verificaci√≥n de Datos":
        verificar_vinculacion_usuarios()

def mostrar_dashboard_administrador():
    """Dashboard general para administradores"""
    st.subheader("üìä Dashboard General")
    
    # M√©tricas generales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_inscritos = len(df_inscritos) if not df_inscritos.empty else 0
        st.metric("Total Inscritos", total_inscritos)
    
    with col2:
        total_estudiantes = len(df_estudiantes) if not df_estudiantes.empty else 0
        st.metric("Total Estudiantes", total_estudiantes)
    
    with col3:
        total_egresados = len(df_egresados) if not df_egresados.empty else 0
        st.metric("Total Egresados", total_egresados)
    
    with col4:
        total_contratados = len(df_contratados) if not df_contratados.empty else 0
        st.metric("Total Contratados", total_contratados)
    
    # Informaci√≥n del sistema
    st.subheader("üîß Estado del Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("**Conexi√≥n SSH:** ‚úÖ Activa" if cargador_remoto.conectar() else "**Conexi√≥n SSH:** ‚ùå Inactiva")
        cargador_remoto.desconectar()
        
        # Verificar configuraci√≥n de email
        estado_email, mensaje_email = sistema_email.test_conexion_smtp()
        st.info(f"**Sistema de Email:** {mensaje_email}")
    
    with col2:
        # Verificar archivos cr√≠ticos
        archivos_criticos = {
            'usuarios.csv': not df_usuarios.empty,
            'inscritos.csv': not df_inscritos.empty,
            'estudiantes.csv': not df_estudiantes.empty
        }
        
        st.write("**Archivos del Sistema:**")
        for archivo, estado in archivos_criticos.items():
            estado_texto = "‚úÖ" if estado else "‚ùå"
            st.write(f"{estado_texto} {archivo}")

def mostrar_gestion_usuarios():
    """Gesti√≥n de usuarios para administradores"""
    st.subheader("üë• Gesti√≥n de Usuarios")

    # Declarar que vamos a usar la variable global
    global df_usuarios

    if df_usuarios.empty:
        st.error("‚ùå No se pudo cargar la base de datos de usuarios")
        return

    # Mostrar tabla de usuarios
    st.dataframe(df_usuarios, use_container_width=True)

    # Opciones de gesti√≥n
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Agregar Usuario")
        with st.form("agregar_usuario"):
            nuevo_usuario = st.text_input("Usuario")
            nueva_contrase√±a = st.text_input("Contrase√±a", type="password")
            nuevo_rol = st.selectbox("Rol", ["inscrito", "estudiante", "egresado", "contratado", "administrador"])
            nuevo_email = st.text_input("Email")

            if st.form_submit_button("‚ûï Agregar Usuario"):
                # Validar que no exista el usuario
                if nuevo_usuario in df_usuarios['usuario'].values:
                    st.error("‚ùå El usuario ya existe")
                else:
                    nuevo_registro = {
                        'usuario': nuevo_usuario,
                        'password': auth.hash_password(nueva_contrase√±a),
                        'rol': nuevo_rol,
                        'email': nuevo_email,
                        'fecha_creacion': datetime.now().strftime('%Y-%m-%d'),
                        'estado': 'activo'
                    }

                    # Crear una copia para evitar problemas de referencia
                    df_temp = df_usuarios.copy()
                    df_temp = pd.concat([df_temp, pd.DataFrame([nuevo_registro])], ignore_index=True)

                    if editor.guardar_dataframe_remoto(df_temp, editor.obtener_ruta_archivo('usuarios')):
                        # Actualizar la variable global
                        df_usuarios = df_temp
                        st.success("‚úÖ Usuario agregado exitosamente")
                        st.rerun()

    with col2:
        st.subheader("Eliminar Usuario")
        usuario_eliminar = st.selectbox("Seleccionar usuario a eliminar", df_usuarios['usuario'].values)

        if st.button("üóëÔ∏è Eliminar Usuario", type="secondary"):
            if usuario_eliminar == st.session_state.usuario_actual['usuario']:
                st.error("‚ùå No puedes eliminar tu propio usuario")
            else:
                # Crear una copia para evitar problemas de referencia
                df_temp = df_usuarios[df_usuarios['usuario'] != usuario_eliminar].copy()

                if editor.guardar_dataframe_remoto(df_temp, editor.obtener_ruta_archivo('usuarios')):
                    # Actualizar la variable global
                    df_usuarios = df_temp
                    st.success("‚úÖ Usuario eliminado exitosamente")
                    st.rerun()

def mostrar_gestion_documentos():
    """Gesti√≥n de documentos para administradores"""
    st.subheader("üìÅ Gesti√≥n de Documentos")
    
    # Navegaci√≥n por tipos de usuarios
    tipo_usuario = st.selectbox(
        "Seleccionar tipo de usuario",
        ["Inscritos", "Estudiantes", "Egresados", "Contratados"]
    )
    
    # Cargar datos seg√∫n selecci√≥n
    if tipo_usuario == "Inscritos":
        datos = df_inscritos
    elif tipo_usuario == "Estudiantes":
        datos = df_estudiantes
    elif tipo_usuario == "Egresados":
        datos = df_egresados
    else:  # Contratados
        datos = df_contratados
    
    if datos.empty:
        st.info(f"üìù No hay datos de {tipo_usuario.lower()} disponibles")
        return
    
    # Mostrar documentos subidos
    if 'documentos_subidos' in datos.columns:
        st.subheader(f"Documentos de {tipo_usuario}")
        
        for _, usuario in datos.iterrows():
            if pd.notna(usuario.get('documentos_subidos')) and usuario['documentos_subidos'] != '':
                with st.expander(f"üìÇ {usuario.get('nombre', 'Usuario')} - {usuario.get('matricula', 'N/A')}"):
                    documentos = usuario['documentos_subidos'].split(';')
                    for doc in documentos:
                        if ':' in doc:
                            tipo, archivo = doc.split(':', 1)
                            st.write(f"**{tipo}:** {archivo}")
                            
                            # Bot√≥n para descargar
                            if documentos.descargar_documento(archivo):
                                st.success(f"‚úÖ {archivo} descargado")
    else:
        st.info(f"üìù No hay documentos subidos para {tipo_usuario.lower()}")

def mostrar_configuracion_email():
    """Configuraci√≥n del sistema de email"""
    st.subheader("üìß Configuraci√≥n del Sistema de Email")
    
    # Verificar configuraci√≥n actual
    st.write("### üîç Verificaci√≥n de Configuraci√≥n Actual")
    
    config_ok = sistema_email.verificar_configuracion_email()
    
    if config_ok:
        st.success("‚úÖ Configuraci√≥n de email encontrada en secrets.toml")
        
        # Mostrar configuraci√≥n (ocultando informaci√≥n sensible)
        config = sistema_email.obtener_configuracion_email()
        email_user = config.get('email_user', '')
        notification_email = config.get('notification_email', '')
        
        col1, col2 = st.columns(2)
        with col1:
            st.info(f"**Email remitente:** {email_user}")
        with col2:
            st.info(f"**Email de notificaci√≥n:** {notification_email}")
        
        # Probar conexi√≥n SMTP
        st.write("### üß™ Probar Conexi√≥n SMTP")
        if st.button("üîç Probar Conexi√≥n"):
            with st.spinner("Probando conexi√≥n SMTP..."):
                exito, mensaje = sistema_email.test_conexion_smtp()
                if exito:
                    st.success(mensaje)
                else:
                    st.error(mensaje)
    
    else:
        st.error("‚ùå Configuraci√≥n de email incompleta o incorrecta")
        
        st.write("### üìù Instrucciones de Configuraci√≥n")
        st.markdown("""
        1. **Crear un archivo `.streamlit/secrets.toml`** en tu directorio de proyecto
        2. **Agregar las siguientes configuraciones:**
        ```toml
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        email_user = "tu_email@gmail.com"
        email_password = "tu_contrase√±a_de_aplicacion"
        notification_email = "email_notificaciones@gmail.com"
        ```
        3. **Para Gmail, necesitas:**
           - Habilitar verificaci√≥n en 2 pasos
           - Generar una contrase√±a de aplicaci√≥n
           - Usar esa contrase√±a en `email_password`
        """)

def mostrar_roles_permisos():
    """Gesti√≥n de roles y permisos"""
    st.subheader("üîê Gesti√≥n de Roles y Permisos")
    
    if df_roles.empty:
        st.info("üìù No hay configuraci√≥n de roles disponible")
        return
    
    st.dataframe(df_roles, use_container_width=True)
    
    # Mostrar permisos por rol
    st.subheader("üìã Permisos por Rol")
    rol_seleccionado = st.selectbox("Seleccionar rol", df_roles['rol'].unique())
    
    permisos_rol = df_roles[df_roles['rol'] == rol_seleccionado]
    if not permisos_rol.empty:
        st.json(permisos_rol.iloc[0]['permisos'] if 'permisos' in permisos_rol.columns else {})

def mostrar_reportes_estadisticas():
    """Reportes y estad√≠sticas para administradores"""
    st.subheader("üìà Reportes y Estad√≠sticas")
    
    # Estad√≠sticas de usuarios por rol
    if not df_usuarios.empty and 'rol' in df_usuarios.columns:
        st.write("### üë• Distribuci√≥n de Usuarios por Rol")
        distribucion_roles = df_usuarios['rol'].value_counts()
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            fig, ax = plt.subplots()
            distribucion_roles.plot(kind='bar', ax=ax, color='skyblue')
            ax.set_title('Usuarios por Rol')
            ax.set_ylabel('Cantidad')
            plt.xticks(rotation=45)
            st.pyplot(fig)
        
        with col2:
            st.write("**Resumen:**")
            for rol, cantidad in distribucion_roles.items():
                st.write(f"- {rol}: {cantidad}")
    
    # Estad√≠sticas de documentos
    st.write("### üìä Estad√≠sticas de Documentos")
    
    total_documentos = 0
    if not df_inscritos.empty and 'documentos_subidos' in df_inscritos.columns:
        docs_inscritos = df_inscritos['documentos_subidos'].apply(
            lambda x: len(str(x).split(';')) if pd.notna(x) and x != '' else 0
        ).sum()
        total_documentos += docs_inscritos
        st.write(f"- **Inscritos:** {docs_inscritos} documentos")
    
    if not df_estudiantes.empty and 'documentos_subidos' in df_estudiantes.columns:
        docs_estudiantes = df_estudiantes['documentos_subidos'].apply(
            lambda x: len(str(x).split(';')) if pd.notna(x) and x != '' else 0
        ).sum()
        total_documentos += docs_estudiantes
        st.write(f"- **Estudiantes:** {docs_estudiantes} documentos")
    
    st.write(f"**Total de documentos en el sistema:** {total_documentos}")

def verificar_vinculacion_usuarios():
    """Verificar la vinculaci√≥n entre usuarios y datos acad√©micos"""
    st.subheader("üîç Verificaci√≥n de Vinculaci√≥n de Usuarios")
    
    if df_usuarios.empty:
        st.error("‚ùå No hay datos de usuarios disponibles")
        return
    
    # Mostrar usuarios y su informaci√≥n vinculada
    st.write("### üë• Usuarios del Sistema")
    
    for _, usuario in df_usuarios.iterrows():
        with st.expander(f"üë§ {usuario['usuario']} - Rol: {usuario.get('rol', 'N/A')}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Informaci√≥n del usuario:**")
                st.write(f"- Email: {usuario.get('email', 'No disponible')}")
                st.write(f"- Rol: {usuario.get('rol', 'No disponible')}")
                st.write(f"- Estado: {usuario.get('estado', 'No disponible')}")
            
            with col2:
                st.write("**Datos vinculados:**")
                # Buscar en diferentes datasets seg√∫n el rol
                rol = usuario.get('rol', '').lower()
                usuario_id = usuario['usuario']
                
                datos_vinculados = False
                
                if rol == 'inscrito' and not df_inscritos.empty:
                    for campo in ['matricula', 'usuario', 'id']:
                        if campo in df_inscritos.columns:
                            vinculado = df_inscritos[df_inscritos[campo].astype(str) == usuario_id]
                            if not vinculado.empty:
                                st.write(f"‚úÖ Vinculado con inscritos (campo: {campo})")
                                st.write(f"- Matr√≠cula: {vinculado.iloc[0].get('matricula', 'N/A')}")
                                st.write(f"- Nombre: {vinculado.iloc[0].get('nombre_completo', 'N/A')}")
                                datos_vinculados = True
                                break
                
                if rol == 'estudiante' and not df_estudiantes.empty:
                    for campo in ['matricula', 'usuario', 'id']:
                        if campo in df_estudiantes.columns:
                            vinculado = df_estudiantes[df_estudiantes[campo].astype(str) == usuario_id]
                            if not vinculado.empty:
                                st.write(f"‚úÖ Vinculado con estudiantes (campo: {campo})")
                                st.write(f"- Matr√≠cula: {vinculado.iloc[0].get('matricula', 'N/A')}")
                                st.write(f"- Programa: {vinculado.iloc[0].get('programa', 'N/A')}")
                                datos_vinculados = True
                                break
                
                if not datos_vinculados:
                    st.warning("‚ö†Ô∏è No se encontraron datos vinculados")

# =============================================================================
# SISTEMA DE LOGIN Y NAVEGACI√ìN PRINCIPAL
# =============================================================================

def mostrar_diagnostico_email():
    """Mostrar diagn√≥stico del sistema de email"""
    st.subheader("üîß Diagn√≥stico del Sistema de Email")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Verificaci√≥n de Configuraci√≥n:**")
        config_ok = sistema_email.verificar_configuracion_email()
        
        if config_ok:
            st.success("‚úÖ Configuraci√≥n encontrada")
        else:
            st.error("‚ùå Problema con la configuraci√≥n")
    
    with col2:
        st.write("**Prueba de Conexi√≥n SMTP:**")
        if st.button("üß™ Probar Conexi√≥n SMTP"):
            with st.spinner("Probando conexi√≥n..."):
                conexion_ok, mensaje = sistema_email.test_conexion_smtp()
                if conexion_ok:
                    st.success(mensaje)
                else:
                    st.error(mensaje)
    
    st.write("**Configuraci√≥n Requerida en secrets.toml:**")
    st.code("""
# Credenciales de email para Gmail
smtp_server = "smtp.gmail.com"
smtp_port = 587
email_user = "tu_email@gmail.com"
email_password = "tu_contrase√±a_de_aplicacion"
notification_email = "email_notificaciones@gmail.com"

# Nota: Para Gmail necesitas:
# 1. Habilitar verificaci√≥n en 2 pasos
# 2. Generar una contrase√±a de aplicaci√≥n
# 3. Usar esa contrase√±a aqu√≠
    """)
    
    # Mostrar datos de usuarios disponibles
    if not df_usuarios.empty and 'email' in df_usuarios.columns:
        st.write("**üìß Emails de Usuarios Disponibles:**")
        usuarios_con_email = df_usuarios[df_usuarios['email'].notna() & (df_usuarios['email'] != '')]
        if not usuarios_con_email.empty:
            df_mostrar = usuarios_con_email[['usuario', 'email']].copy()
            df_mostrar.index = df_mostrar.index + 1
            st.dataframe(df_mostrar, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è No hay usuarios con email registrado")
    
    st.write("**Soluci√≥n de Problemas Comunes:**")
    with st.expander("üîç Ver soluciones para problemas comunes"):
        st.write("""
        **‚ùå Error de autenticaci√≥n:**
        - Verifica que el email y contrase√±a sean correctos
        - Para Gmail: habilita verificaci√≥n en 2 pasos y usa contrase√±a de aplicaci√≥n
        - Ve a: Google Account ‚Üí Security ‚Üí 2-Step Verification ‚Üí App passwords
        
        **‚ùå Error de conexi√≥n:**
        - Verifica tu conexi√≥n a internet
        - Aseg√∫rate que el puerto 587 no est√© bloqueado
        - Prueba con un servicio de email diferente
        
        **‚ùå Email no llega:**
        - Revisa la carpeta de spam
        - Verifica que la direcci√≥n de destino sea correcta
        - Prueba con una direcci√≥n de email diferente
        """)

def mostrar_login():
    """Interfaz de login - MEJORADA CON ESTADO DE CARGA REMOTA"""
    st.title("üîê Sistema Acad√©mico - Instituto Nacional de Cardiolog√≠a")
    st.markdown("---")

    # Estado de la carga remota
    with st.expander("üåê Estado de la Carga Remota", expanded=True):
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            asp = "‚úÖ" if not df_inscritos.empty else "‚ùå"
            st.metric("Inscritos", f"{asp} {len(df_inscritos)}")
        with col2:
            est = "‚úÖ" if not df_estudiantes.empty else "‚ùå"
            st.metric("Estudiantes", f"{est} {len(df_estudiantes)}")
        with col3:
            egr = "‚úÖ" if not df_egresados.empty else "‚ùå"
            st.metric("Egresados", f"{egr} {len(df_egresados)}")
        with col4:
            con = "‚úÖ" if not df_contratados.empty else "‚ùå"
            st.metric("Contratados", f"{con} {len(df_contratados)}")
        with col5:
            prog = "‚úÖ" if not df_programas.empty else "‚ùå"
            st.metric("Programas", f"{prog} {len(df_programas)}")

        if st.button("üîÑ Recargar Datos Remotos"):
            st.rerun()

    # Diagn√≥stico de email
    with st.expander("üîß Diagn√≥stico del Sistema de Email", expanded=False):
        mostrar_diagnostico_email()

    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        with st.form("login_form"):
            st.subheader("Iniciar Sesi√≥n")
            usuario = st.text_input("üë§ Usuario")
            password = st.text_input("üîí Contrase√±a", type="password")
            login_button = st.form_submit_button("üöÄ Ingresar al Sistema")

            if login_button:
                if usuario and password:
                    with st.spinner("Verificando credenciales..."):
                        if auth.verificar_login(usuario, password):
                            st.success(f"‚úÖ Bienvenido, {usuario}!")
                            st.rerun()
                        else:
                            st.error("‚ùå Credenciales incorrectas")
                else:
                    st.warning("‚ö†Ô∏è Complete todos los campos")

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Inicializar estado de sesi√≥n
    if 'login_exitoso' not in st.session_state:
        st.session_state.login_exitoso = False
    if 'usuario_actual' not in st.session_state:
        st.session_state.usuario_actual = None
    
    # Mostrar interfaz seg√∫n estado de login
    if not st.session_state.login_exitoso:
        mostrar_login()
    else:
        # Barra superior con informaci√≥n del usuario
        usuario_actual = st.session_state.usuario_actual
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.title(f"üè• Sistema Acad√©mico - Instituto Nacional de Cardiolog√≠a")
        
        with col2:
            st.write(f"**üë§ Usuario:** {usuario_actual['usuario']}")
            st.write(f"**üé≠ Rol:** {usuario_actual['rol']}")
        
        with col3:
            if st.button("üö™ Cerrar Sesi√≥n"):
                auth.cerrar_sesion()
                st.session_state.login_exitoso = False
                st.session_state.usuario_actual = None
                st.rerun()
        
        st.markdown("---")
        
        # Mostrar interfaz seg√∫n rol
        rol_actual = usuario_actual.get('rol', '').lower()
        
        if rol_actual == 'administrador':
            mostrar_interfaz_administrador()
        elif rol_actual == 'inscrito':
            mostrar_interfaz_inscrito()
        elif rol_actual == 'estudiante':
            mostrar_interfaz_estudiante()
        elif rol_actual == 'egresado':
            mostrar_interfaz_egresado()
        elif rol_actual == 'contratado':
            mostrar_interfaz_contratado()
        else:
            st.error(f"‚ùå Rol no reconocido: {rol_actual}")
            st.info("Roles disponibles: administrador, inscrito, estudiante, egresado, contratado")

if __name__ == "__main__":
    main()
